from flask import Blueprint
from flask import render_template
from flask import make_response, request
from flask import request
import secrets
import time

SESSION_TIMEOUT = 5

COOKIE_NAME = 'Name'

DEFAULT_COOKIE = 'DEFAULT_COOKIE'
INVALID_COOKIE = 'INVALID_COOKIE'
SESSION_TIMEOUT_COOKIE = 'TIMEOUT_COOKIE'

site = Blueprint('site', __name__)

last_request = time.time()
last_cookie = ''


def is_session_invalid():
    return time.time() - last_request > SESSION_TIMEOUT


# not a decorator, mess up with flask route functionality....
def update_session():
    global last_request
    last_request = time.time()


@site.route('/')
def home():
    resp = make_response(render_template('index.html'))
    if is_session_invalid():
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)
    update_session()
    return resp


@site.route('/set_default_cookie')
def set_default_cookie():
    global last_cookie

    resp = make_response('The Cookie has been Set')

    last_cookie = DEFAULT_COOKIE
    resp.set_cookie(COOKIE_NAME, DEFAULT_COOKIE)
    update_session()
    return resp


@site.route('/set_cookie')
def set_cookie():
    global last_cookie

    resp = make_response('The Cookie has been Set')
    last_cookie = secrets.token_hex(nbytes=16)
    resp.set_cookie(COOKIE_NAME, last_cookie)
    update_session()
    return resp


@site.route('/get_cookie')
def get_cookie():
    if is_session_invalid():
        resp = make_response(SESSION_TIMEOUT_COOKIE)
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)
        update_session()
        return resp
    update_session()
    return last_cookie


@site.route('/good_cookie')
def good_cookie():
    if is_session_invalid():
        resp = make_response(str(False))
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)
        update_session()
        return resp

    update_session()
    return str(request.cookies.get(COOKIE_NAME) == last_cookie)


@site.route('/set_invalid_cookie')
def set_invalid_cookie():
    global last_cookie
    last_cookie = ''

    resp = make_response('The Cookie has been Set')
    resp.set_cookie(COOKIE_NAME, INVALID_COOKIE)
    update_session()
    return resp


@site.route('/alert_cookie')
def alert_cookie():
    if is_session_invalid():
        resp = make_response(render_template('alert_data.html', data=SESSION_TIMEOUT_COOKIE))
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)
        update_session()
        return resp

    update_session()
    return render_template('alert_data.html', data=request.cookies.get(COOKIE_NAME))


@site.route('/form_page', methods=['GET', 'POST'])
def form_page():
    if request.method == 'POST':
        data: dict = request.form.to_dict()
        one = data.get('inputOne')

        resp = make_response(render_template('alert_data.html', data=one))
        if is_session_invalid():
            resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)

        update_session()
        return resp

    resp = make_response(render_template('form_page.html'))
    if is_session_invalid():
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)

    update_session()
    return resp


@site.route('/many_alerts')
def many_alerts():
    resp = make_response(render_template('many_alerts.html'))
    if is_session_invalid():
        resp.set_cookie(COOKIE_NAME, SESSION_TIMEOUT_COOKIE)

    update_session()
    return resp
