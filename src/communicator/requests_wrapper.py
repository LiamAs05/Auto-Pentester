#! usr/bin/python3
from requests import Session, HTTPError, TooManyRedirects, Timeout, ConnectionError, Response
from sys import stderr


class RequestsWrapper:
    """
        This is a wrapper class for the requests communication library
        it provides a simpler API for several function in requests

        Attributes
        ----------
        @param url: str
            URL of the targeted site
        @param ip: str
            IP of the targeted site

        todo finish documenting class (need to document functions)
    """

    def __init__(self, ip: str = "", url: str = ""):
        self._IP = ip
        self._URL = url
        # todo add self._cookies
        # todo add self._auth_creds
        self._session = Session()

    def get(self, param_dict: dict) -> Response:  # todo add optional parameters
        """
        Performs a get request
        @return Response object if connection succeeds
        @rtype requests.Response()
        @return None if an exception occurred
        """
        try:
            res = self.session.get(self.url, params=param_dict)
            return res
        except (Timeout, HTTPError, TooManyRedirects, ConnectionError) as e:
            print(e, file=stderr)

    def post(self, param_dict: dict) -> Response:  # todo add optional parameters
        """
        Performs a post request
        @return: Response object if connection succeeds
        @rtype requests.Response
        @return None if an exception occurred
        """
        try:
            res = self.session.post(self.url, params=param_dict)
            return res
        except (Timeout, HTTPError, TooManyRedirects, ConnectionError) as e:
            print(e, file=stderr)

    def add_header(self, header_name: str, header_value: str) -> None:
        """
        Adds header to current HTTP session
        @param header_name: name of the header
        @param header_value: value of the header
        @raise ValueError: in case value is None
        @raise KeyError: in case key is None or empty
        @return: None
        """

        if header_value is None:
            raise ValueError("Header value cannot be None")

        if not header_name:
            raise KeyError("Header name cannot be None or Empty")

        self.session.headers[header_name] = header_value

    def remove_header(self, header_name: str) -> None:
        """
        Removes header from current HTTP session
        @param header_name: name of the header
        @raise KeyError: in case key does not exist
        @return: None
        """

        try:
            del self.session.headers[header_name]
        except KeyError as e:
            print(e, file=stderr)

    def add_cookie(self, name: str, value: str) -> None:
        """
        Adds a cookie to the session's cookie dict
        @param name: name of the cookie
        @param value: value of the cookie
        @raise ValueError: in case value is None
        @raise KeyError: in case key is None or empty
        @return: None
        """

        if value is None:
            raise ValueError("Header value cannot be None")

        if not name:
            raise KeyError("Header name cannot be None or Empty")

        self.session.cookies[name] = value

    def remove_cookie(self, name: str) -> None:
        """
        Removes a cookie from session's cookie dict
        @param name: name of the cookie
        @raise KeyError: in case key does not exist
        @return: None
        """

        try:
            del self.session.cookies[name]
        except KeyError as e:
            print(e, file=stderr)

    # def change_auth(self, username: str, password: str) -> None:
    #     """
    #     Adds an authentication cred to the session's cookie dict
    #     @param username
    #     @param password
    #     @raise ValueError: in case username or password is None or Empty
    #     @return: None
    #     """
    #
    #     if not username or not password:
    #         raise ValueError("Header name cannot be None or Empty")
    #
    #     self.session.auth = (username, password)

    # def remove_auth(self) -> None:
    #     """
    #     Removes the current authentication creds
    #     @return: None
    #     """
    #     self.session.auth = None

    def close_session(self) -> None:
        """
        Closes a requests session
        @return: None
        """
        self.session.close()

    def create_new_session(self) -> None:
        """
        Creates a new requests session
        @return: None
        """
        self.close_session()
        self.session = Session()

    def is_session_active(self) -> bool:
        pass

    def __str__(self) -> str:
        """
        __str__ method override
        @rtype: str
        """
        s = self.session
        return "URL:\t" + self.url + "\nIP:\t" + self.ip + "\nCookies:\t" + str(
            s.cookies.get_dict()) + "\nHeaders:\t" + str(
            s.headers) + "\nAuth:\t" + str(s.auth)

    @property
    def ip(self) -> str:
        return self._IP

    @property
    def url(self) -> str:
        return self._URL

    @property
    def session(self) -> Session:
        return self._session

    @ip.setter
    def ip(self, new_ip: str) -> None:
        self._IP = new_ip

    @url.setter
    def url(self, new_url: str) -> None:
        self._URL = new_url

    @session.setter
    def session(self, new_session: Session) -> None:
        self._session = new_session
