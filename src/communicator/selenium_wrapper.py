#! /usr/bin/python3

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoAlertPresentException

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

TIMEOUT = 10


class SeleniumWrapper:
    def __init__(self,
                 url: str = "",
                 ip: str = "",
                 cookies: dict = None,
                 authentication_creds: set = None,
                 hidden: bool = True,
                 timeout: int = TIMEOUT):
        self._url = url
        self._ip = ip
        self._cookies = cookies
        self._authentication_creds = authentication_creds
        self._timeout = timeout
        self._hidden = hidden
        self._webdriver = self._create_driver()

    def get(self, url: str = "", cookies: dict = None):
        """
        Function set new cookie if needed.
        and make a get request to the given url
        """
        if url:
            self._url = url

        if cookies:
            self._cookies = cookies

        self._set_webdriver_cookies()
        self._webdriver.set_page_load_timeout(self._timeout)
        self._webdriver.get(self._url)
        self._get_webdriver_cookies()
        self._remove_alerts()
        self._url = self._webdriver.current_url

    def post(self, data: dict):
        """
        function get dict of web elements (inputs of form)

        fill the form and send it
        """
        if not data:
            return

        for element, payload in data.items():
            element.send_keys(payload)

        element = list(data.keys())[0]
        element.send_keys(Keys.RETURN)

        self._get_webdriver_cookies()
        self._url = self._webdriver.current_url

    def get_alert_text(self):
        """
        Function get the alert text.
        Note: can raise alert exception if there is no alert
        """
        alert = self._webdriver.switch_to.alert
        text = alert.text
        alert.accept()
        return text

    def new_session(self,
                    url: str = "",
                    ip: str = "",
                    cookies: dict = None,
                    authentication_creds: set = None,
                    hidden: bool = True,
                    timeout: int = TIMEOUT
                    ):
        """
        function delete the session and recreate it.
        """
        self.close_session()
        self.__init__(url, ip, cookies, authentication_creds, hidden, timeout)

    def close_session(self):
        self._webdriver.quit()

    def is_session_active(self):
        """
        Function refresh the session and check if the old cookie is still valid
        """
        old_cookies = self._cookies
        self.refresh()

        return old_cookies == self._cookies

    def refresh(self):
        """ refresh """
        self._webdriver.refresh()
        self._get_webdriver_cookies()

    def get_element_by_name(self, element_name):
        """ get_element_by_name """
        return self._webdriver.find_element(By.NAME, element_name)

    def get_element_by_id(self, element_id):
        """ get_element_by_id """
        return self._webdriver.find_element(By.ID, element_id)

    def _create_driver(self) -> webdriver.Chrome:
        """
        Function create a new webdriver
        """
        options = webdriver.ChromeOptions()
        # Make webdriver hidden
        if self._hidden:
            options.add_argument('headless')
            options.add_argument('window-size=1920x1080')
            options.add_argument("disable-gpu")

        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
        # setting up cookies
        self._set_webdriver_cookies()

        return driver

    def _get_webdriver_cookies(self):
        """
        Call the function after making a request.
        the function get the new cookies, and update the cookie
        variable if needed.
        """
        new_cookies = self._webdriver.get_cookies()
        if new_cookies is not None:
            self._cookies = new_cookies

    def _set_webdriver_cookies(self):
        """
        Function set new cookies.
        """

        if self._cookies is None:
            return

        if self._webdriver.get_cookies() != self._cookies:
            self._webdriver.delete_all_cookies()
            self._webdriver.add_cookie(self._cookies)

    def _remove_alerts(self):
        """
        Function accept all the alerts.
        """
        while True:
            try:
                alert = self._webdriver.switch_to.alert
                alert.accept()
            except NoAlertPresentException:
                break

    def __str__(self):
        return f"""
Selenium Wrapper:
[*] URL: "{self._url}"
[*] IP: "{self._ip}"
[*] cookies: {self._cookies}
[*] authentication creds: {self._authentication_creds}
[*] timeout: {self._timeout}
[*] hidden: {self._hidden}
[*] webdriver: {self._webdriver.name}
"""

    @property
    def url(self):
        return self._url

    @property
    def ip(self):
        return self._ip

    @property
    def cookies(self):
        return self._cookies

    @property
    def authentication_creds(self):
        return self._authentication_creds

    @url.setter
    def url(self, value):
        self._url = value

    @ip.setter
    def ip(self, value):
        self._ip = value

    @cookies.setter
    def cookies(self, value):
        self._cookies = value

    @authentication_creds.setter
    def authentication_creds(self, value):
        self._authentication_creds = value
