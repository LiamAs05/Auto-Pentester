#! /usr/bin/python3
from sys import stderr

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoAlertPresentException, TimeoutException
from src.communicator.wrapper_interface import WrapperInterface
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

from src.communicator.wrapper_interface import TIMEOUT


class SeleniumWrapper(WrapperInterface):
    """
        A wrapper class for Selenium that do all the work behind the science and
        provide a simple API to Selenium
        ...

        Attributes
        ----------
        @param url: str
            the current URL of the webdriver
        @param cookies: dict
            the cookies of the webdriver, used to authentication
        @param timeout: float
            timeout in seconds of the webdriver, should raise exception if timeout.
        @param hidden: bool
            used the set the webdriver window.

        Methods
        -------
            get(url: str = "", cookies: dict = None)
                function commit a GET request

            simple_get(self, url: str = "", cookies: dict = None)
                function commit a GET request, but do not remove the alerts and get the cookies

            post(data: dict, cookies: dict = None)
                function commit a POST request

            get_alert_text()
                function accept the alert and return his text

            new_session()
                function close the old session, and create new one

            close_session()
                function close the session

            is_session_active()
                function refresh the session and check if it is still active

            refresh()
                function refresh the page

            get_element_by_name(element_name)
                function return the web element by name

            get_element_by_id(element_id)
                function return the web element by id

            remove_alerts()
                function accept all the alerts

            get_webdriver_cookies()
                function get the cookies from the webdriver, and set them in cookies attribute
    """

    def __init__(self,
                 url: str = "",
                 cookies: dict = None,
                 hidden: bool = True,
                 timeout: int = TIMEOUT):
        self._url = url
        self._cookies = cookies
        self._timeout = timeout
        self._hidden = hidden
        self._webdriver = self._create_driver()

    def get(self, **kwargs) -> None:
        """
        Function commit a GET request to the given url.

        the function set the cookies, get the page, remove the alerts and get the cookies
        from the webdriver.

        @param kwargs: url: url of the page
        @param kwargs: cookies: new cookies if needed

        @return: None
        """
        self._url = kwargs.get('url', self._url)
        self._cookies = kwargs.get('cookies', self._cookies)

        self._set_webdriver_cookies()
        self._webdriver.set_page_load_timeout(self._timeout)

        try:
            self._webdriver.get(self._url)
        except TimeoutException as e:
            print(e, file=stderr)

        self.remove_alerts()
        self.get_webdriver_cookies()
        self._url = self._webdriver.current_url
        WebDriverWait(self._webdriver, timeout=10).until(self._webdriver.execute_script("return initialised"))

    def simple_get(self, url: str = "", cookies: dict = None) -> None:
        """
        Function commit a GET request without additional.

        function get url and cookies, set them into the webdriver.
        commit the request.
        Note: function *Do not* set the new cookies and remove the alerts.

        @param url: url of the page
        @param cookies: new cookies if needed

        @return: None
        """

        if url:
            self._url = url

        if cookies:
            self._cookies = cookies

        self._set_webdriver_cookies()
        self._webdriver.set_page_load_timeout(self._timeout)
        try:
            self._webdriver.get(self._url)
        except TimeoutException as e:
            print(e, file=stderr)

    def post(self, **kwargs) -> None:
        """
        Function commit a POST request.

        @param kwargs: data: a WebElement key value data.
        key - WebElement (<input> element)
        value - data to insert into the input element (str)

        @param kwargs: cookies: new cookies if needed.

        @return: None
        """

        data = kwargs.get('data', None)
        self._cookies = kwargs.get('cookies', self._cookies)
        if not data:
            raise ValueError()

        self._set_webdriver_cookies()
        self._webdriver.set_page_load_timeout(self._timeout)

        # submit the form
        for element, payload in data.items():
            element.send_keys(payload)

        element = list(data.keys())[0]
        element.send_keys(Keys.RETURN)

    def add_cookie(self, cookie_name: str, cookie_value: str) -> None:
        """
        Adds a cookie to the object's cookie dict
        @param cookie_name: name of the cookie
        @param cookie_value: value of the cookie
        @raise ValueError: in case value is None
        @raise KeyError: in case key is None or empty
        @return: None
        """
        if cookie_value is None:
            raise ValueError("Header value cannot be None")

        if not cookie_name:
            raise KeyError("Header name cannot be None or Empty")

        self.cookies[cookie_name] = cookie_value

    def remove_cookie(self, cookie_name: str) -> None:
        """
        Removes a cookie from session's cookie dict
        @param cookie_name: name of the cookie
        @raise KeyError: in case key does not exist
        @return: None
        """
        try:
            del self.cookies[cookie_name]
        except KeyError as e:
            print(e, file=stderr)

    def get_alert_text(self):
        """
        Function get the alert text from the alert element, and return it.

        @raise NoAlertPresentException: if there is no alert.

        @rtype: str
        @return: alert text
        """
        alert = self._webdriver.switch_to.alert
        text = alert.text
        alert.accept()
        return text

    def create_new_session(self,
                           url: str = "",
                           cookies: dict = None,
                           hidden: bool = True,
                           timeout: int = TIMEOUT
                           ):
        """
        function delete the session and create new one.

        @param url: url of the page
        @param cookies: new cookies if needed
        @param hidden: to set the web driver visible
        @param timeout: to set the web driver timeout

        @return: None
        """
        self.close_session()
        self.__init__(url, cookies, hidden, timeout)

    def close_session(self):
        """
        function close the session

        @return: None
        """
        self._webdriver.quit()

    def is_session_active(self):
        """
        Function refresh the session and check if the old cookie is still valid.

        @return: True if the session is active else False
        """
        old_cookies = self._cookies
        self.refresh_session()

        return old_cookies == self._cookies

    def refresh_session(self):
        """
        Function refresh the session and get the new cookies.

        @return: None
        """
        self._webdriver.refresh()
        self.get_webdriver_cookies()

    def get_element_by_name(self, element_name):
        """
        Function return a web element by name

        @param element_name: The name of the element

        @raise NoSuchElementException: if there is no element with the given name.

        @rtype: WebElement
        @return: a web element
        """
        return self._webdriver.find_element(By.NAME, element_name)

    def get_element_by_id(self, element_id):
        """
        Function return a web element by id

        @param element_id: The id of the element

        @raise NoSuchElementException: if there is no element with the given id.

        @rtype: WebElement
        @return: a web element
        """
        return self._webdriver.find_element(By.ID, element_id)

    def remove_alerts(self):
        """
        Function accept all the alerts.

        @return: None
        """
        while True:
            try:
                alert = self._webdriver.switch_to.alert
                alert.accept()
            except NoAlertPresentException:
                break

    def get_webdriver_cookies(self):
        """
        Function update the cookie attribute.

        @return: None
        """
        self.cookies = self._webdriver.get_cookies()

    def _create_driver(self) -> webdriver.Chrome:
        """
        Function create a new webdriver

        @return: driver
        """
        options = webdriver.ChromeOptions()
        # Make webdriver hidden
        if self._hidden:
            options.add_argument('headless')
            options.add_argument('window-size=1920x1080')
            options.add_argument("disable-gpu")

        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

        return driver

    def _set_webdriver_cookies(self):
        """
        Function set new cookies.

        @return None
        """

        if self.cookies and self._webdriver.get_cookies() != self._cookies:
            self._webdriver.delete_all_cookies()
            self._webdriver.add_cookie(self._cookies)

    def __enter__(self):
        """
        Adds the with SeleniumWrapper as var functionality
        @return: SeleniumWrapper object
        """
        return self

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """
        Closes session on exit
        @return: None
        """
        self.close_session()

    def __str__(self):
        return f"""
Selenium Wrapper:
[*] URL: "{self._url}"
[*] cookies: {self._cookies}
[*] timeout: {self._timeout}
[*] hidden: {self._hidden}
[*] webdriver: {self._webdriver.name}
"""

    @property
    def url(self) -> str:
        return self._url

    @property
    def cookies(self) -> dict:
        return self._cookies

    @property
    def timeout(self) -> int:
        return self._timeout

    @url.setter
    def url(self, value) -> None:
        self._url = value

    @cookies.setter
    def cookies(self, value) -> None:
        self._cookies = value

    @timeout.setter
    def timeout(self, value) -> None:
        self._timeout = value

    @property
    def webdriver_url(self) -> str:
        return self._webdriver.current_url
