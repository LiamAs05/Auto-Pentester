#! /usr/bin/python3

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager


class SeleniumWrapper:
    def __init__(self,
                 url: str = "",
                 ip: str = "",
                 cookies: dict = None,
                 authentication_creds: set = None,
                 session_id: str = None,
                 ):
        self._url = url
        self._ip = ip
        self._cookies = cookies
        self._authentication_creds = authentication_creds
        self._webdriver = self._create_driver()
        self._session_id = session_id

    def _create_driver(self) -> webdriver.Chrome:
        """
        Function create a new hidden webdriver
        """

        # Make webdriver hidden
        options = webdriver.ChromeOptions()
        options.add_argument('headless')
        options.add_argument('window-size=1920x1080')
        options.add_argument("disable-gpu")
        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
        # setting up cookies and session id
        self._setting_driver(driver)

        return driver

    def _setting_driver(self, driver: webdriver.Chrome) -> None:
        """
        Function set cookies and session id if they exist.
        """
        if self._cookies is not None:
            driver.add_cookie(self._cookies)

        if self._session_id:
            driver.session_id = self._session_id

    def __str__(self):
        return f"""
Selenium Wrapper:
[*] URL: "{self._url}"
[*] IP: "{self._ip}"
[*] cookies: {self._cookies}
[*] authentication creds: {self._authentication_creds}
[*] session id: {self._session_id}
[*] webdriver: {self._webdriver.name}
"""

    @property
    def url(self):
        return self._url

    @property
    def ip(self):
        return self._ip

    @property
    def cookies(self):
        return self._cookies

    @property
    def authentication_creds(self):
        return self._authentication_creds

    @property
    def session_id(self):
        return self._session_id

    @url.setter
    def url(self, value):
        self._url = value

    @ip.setter
    def ip(self, value):
        self._ip = value

    @cookies.setter
    def cookies(self, value):
        self._cookies = value

    @authentication_creds.setter
    def authentication_creds(self, value):
        self._authentication_creds = value

    @session_id.setter
    def session_id(self, value):
        self._session_id = value
