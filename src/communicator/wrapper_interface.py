from abc import ABC, abstractmethod
from requests import Response, Session
from typing import Union


class WrapperInterface(ABC):
    @abstractmethod
    def get(self, url: str = "", data: dict = None, params: dict = None, allow_redirects: bool = True, auth: tuple = None,
            cert: Union[tuple, str] = None, cookies: dict = None, headers: dict = None,
            timeout: int = None) -> Response:
        pass

    @abstractmethod
    def simple_get(self, url: str = "", cookies: dict = None) -> Response:
        pass

    @abstractmethod
    def post(self, url: str = "", data: dict = None, params: dict = None, allow_redirects: bool = True, auth: tuple = None,
             cert: Union[tuple, str] = None, cookies: dict = None, headers: dict = None,
             timeout: int = None) -> Response:
        pass

    @abstractmethod
    def add_header(self, header_name: str, header_value: str) -> None:
        pass

    @abstractmethod
    def remove_header(self, header_name: str) -> None:
        pass

    @abstractmethod
    def add_cookie(self, cookie_name: str, cookie_value: str) -> None:
        pass

    @abstractmethod
    def remove_cookie(self, cookie_name: str) -> None:
        pass

    def get_alert_text(self):
        pass

    def change_auth(self, username: str, password: str) -> None:
        pass

    def remove_auth(self) -> None:
        pass

    @abstractmethod
    def create_new_session(self) -> None:
        pass

    @abstractmethod
    def close_session(self) -> None:
        pass

    def is_session_active(self) -> bool:
        pass

    def refresh_session(self) -> None:
        pass

    def get_element_by_name(self):
        pass

    def get_element_by_id(self):
        pass

    def remove_alerts(self):
        pass

    def get_webdriver_cookies(self):
        pass

    @abstractmethod
    def __str__(self) -> str:
        pass

    @abstractmethod
    @property
    def ip(self) -> str:
        pass

    @abstractmethod
    @property
    def url(self) -> str:
        pass

    @abstractmethod
    @property
    def cookies(self) -> dict:
        pass

    @abstractmethod
    @ip.setter
    def ip(self, new_ip: str) -> None:
        pass

    @abstractmethod
    @url.setter
    def url(self, new_url: str) -> None:
        pass

    @abstractmethod
    @cookies.setter
    def cookies(self, new_cookies: dict) -> None:
        pass
