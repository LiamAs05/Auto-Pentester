#! /usr/bin/python3

from typing import Union

import requests
import validators
from requests import Response
from scapy.layers.dns import DNS, DNSQR
from scapy.layers.inet import IP, ICMP, UDP
from scapy.sendrecv import sr1
from selenium.webdriver.remote.webelement import WebElement

from src.communicator.requests_wrapper import RequestsWrapper
from src.communicator.selenium_wrapper import SeleniumWrapper
from src.communicator.wrapper_interface import TIMEOUT


class Communicator:
    def __init__(self, url: str, headers: dict = None,
                 cookies: dict = None, auth: tuple = None, use_requests_interface=False,
                 hidden: bool = True, timeout: int = TIMEOUT):

        self.BASE_URL = url
        self._URL = url

        if not self.__is_url_valid():
            raise ValueError("URL must be a valid")

        with requests.Session() as s:
            self._headers = headers if headers is not None else s.headers.copy()

        self._auth = auth
        self._cookies = cookies or dict()
        self._hidden = hidden
        self._timeout = timeout
        if use_requests_interface:
            self._active_interface = RequestsWrapper(url, headers, cookies)
        else:
            self._active_interface = SeleniumWrapper(url, cookies, hidden, timeout)

    def get(self, url: str = "", data: dict = None, params: dict = None, allow_redirects: bool = True,
            auth: tuple = None, cert: Union[tuple, str] = None,
            cookies: dict = None, headers: dict = None) -> Union[Response, None]:
        """
        Function call to the specific wrapper get method
        @param url: url
        @param data: to the form
        @param params: params in the url
        @param allow_redirects: allow the website redirect
        @param auth: authentication username & password
        @param cert: certificate
        @param cookies: cookies in the url
        @param headers: http headers
        @return: http response or none
        """
        if url:
            self.url = url

        res = self.interface.get(url=self.url,
                                 data=data,
                                 params=params,
                                 allow_redirects=allow_redirects,
                                 auth=auth,
                                 cert=cert,
                                 cookies=cookies,
                                 headers=headers)

        self.cookies = self.interface.cookies

        return res

    def simple_get(self, url: str = "", cookies: dict = None) -> Union[Response, None]:
        """
        Function make a simple GET request

        @param url: url
        @param cookies: cookies
        @return: HTTP response or none
        """
        if url:
            self.url = url

        if cookies:
            self.cookies = cookies
        res = self.interface.simple_get(url=self.url, cookies=self.cookies)

        self.cookies = self.interface.cookies
        return res

    def post(self, url: str = "", data: dict = None, params: dict = None, allow_redirects: bool = True,
             auth: tuple = None, cert: Union[tuple, str] = None,
             cookies: dict = None, headers: dict = None) -> Union[Response, None]:
        """
        Function make as post requests

        @param url: url
        @param data: data to send in the form
        @param params: params in url
        @param allow_redirects: allow the server to redirect
        @param auth: authentication username & password
        @param cert: certificate
        @param cookies: cookies to sent
        @param headers: HTTP headers
        @return: HTTP response or None
        """

        if url:
            self.url = url

        res = self.interface.post(url=self.url,
                                  data=data,
                                  params=params,
                                  allow_redirects=allow_redirects,
                                  auth=auth,
                                  cert=cert,
                                  cookies=cookies,
                                  headers=headers)

        self.cookies = self.interface.cookies
        return res

    def close_session(self) -> None:
        """
        Function close the session
        @return: None
        """
        self.interface.close_session()

    def refresh_session(self) -> None:
        """
        Function refresh the session
        @return: None
        """
        self.interface.refresh_session()

    def is_session_active(self) -> bool:
        """
        Function check if session is active
        @return: bool
        """
        return self.interface.is_session_active()

    def set_new_session_cookie(self) -> None:
        """
        Function set session new cookie
        @return: None
        """
        self.interface.set_new_session_cookie()

    def create_new_session(self,
                           url: str = "",
                           cookies: dict = None,
                           hidden: bool = True,
                           timeout: int = TIMEOUT) -> None:
        """
        Function create new session
        @param url: new session url
        @param cookies: new session cookies
        @param hidden: is session hidden (relevant for selenium)
        @param timeout: new session timeout
        @return: None
        """
        self.url = url
        self.cookies = cookies
        self.hidden = hidden
        self.timeout = timeout
        self.interface.create_new_session(url, cookies, hidden, timeout)

    def add_header(self, header_name: str, header_val: str) -> None:
        """
        Function add a new header
        @param header_name: key
        @param header_val: value
        @return: None
        """
        self.interface.add_header(header_name, header_val)
        self.headers[header_name] = header_val

    def remove_header(self, header_name: str) -> None:
        """
        Function remove HTTP header by name
        @param header_name: HTTP header name
        @return: None
        """
        self.interface.remove_header(header_name)
        del self.headers[header_name]

    def add_cookie(self, cookie_name: str, cookie_value: str) -> None:
        """
        Adds a cookie to the interface and the object cookies
        @param cookie_name: name of cookie to add
        @param cookie_value: value of cookie to add
        @return: None
        """
        self.interface.add_cookie(cookie_name, cookie_value)
        self.cookies[cookie_name] = cookie_value

    def remove_cookie(self, cookie_name: str) -> None:
        """
        Removes a cookie from the interface and from the object cookies
        @param cookie_name: cookie to remove
        @return: None
        """
        self.interface.remove_cookie(cookie_name)
        del self.cookies[cookie_name]

    def get_alert_text(self) -> str:
        """
        Returns the text on an alert found on the website
        @return: the text that was on the alert
        @rtype: str
        """
        return self.interface.get_alert_text()

    def remove_alerts(self) -> None:
        """
        Removes all the alerts on a website
        (As if the alerts have been clicked)
        @return: None
        """
        self.interface.remove_alerts()

    def get_element_by_name(self, name: str) -> WebElement:
        """
        Finds web element by its name
        @param name: name of the element
        @return: element
        @rtype: WebElement
        """
        return self.interface.get_element_by_name(name)

    def get_element_by_id(self, id_str: str) -> WebElement:
        """
        Finds web element by its ID field
        @param id_str: id of the element
        @return: element
        @rtype: WebElement
        """
        return self.interface.get_element_by_id(id_str)

    def change_auth(self, username: str, password: str) -> None:
        """
        Changes current authenticate creds
        @param username: username to authenticate with
        @param password: password to authenticate with
        @return: None
        """
        self.interface.change_auth(username, password)

    def remove_auth(self) -> None:
        """
        Deletes the authentication creds
        @return: None
        """
        self.interface.remove_auth()

    def is_selenium_interface(self) -> bool:
        """
        Checks if the interface is currently using selenium
        @return: True if selenium, False if requests
        @rtype: bool
        """
        return type(self.interface) == SeleniumWrapper

    def switch_to_selenium(self, reload: bool = False) -> None:
        """
        Switching interface to Selenium, if interface is already selenium - does nothing
        @param reload: Erase current data, yes if True, default False
        @return: None
        """
        if self.is_selenium_interface():
            return

        self.interface.close_session()
        if reload:
            self.cookies.clear()
            self.headers.clear()
            self.auth = tuple()

        self.interface = SeleniumWrapper(self.url, self.cookies, self.hidden, self.timeout)

    def switch_to_requests(self, reload: bool = False) -> None:
        """
        Switching interface to requests, if interface is already requests - does nothing
        @param reload: Erase current data, yes if True, default False
        @return: None
        """
        if not self.is_selenium_interface():
            return

        self.interface.close_session()
        if reload:
            self.cookies.clear()
            self.headers.clear()
            self.auth = tuple()

        self.interface = RequestsWrapper(self.url, self.headers, self.cookies)

    @staticmethod
    def ping(ip: str) -> bool:
        """
        Checks if the host found at ip is alive
        @param ip: Address of the host
        @return: True if active, False if not
        @rtype: bool
        """
        icmp = IP(dst=ip) / ICMP()
        for _ in range(4):
            if sr1(icmp, verbose=0, timeout=TIMEOUT):
                return True
        return False

    def nslookup(self) -> str:
        """
        Finds the IP of a given URL
        @return: IP
        @rtype: str
        """
        dns = IP(dst="8.8.8.8") / UDP(dport=53) / \
              DNS(rd=1, qd=DNSQR(qname=self.BASE_URL[self.BASE_URL.index("://") + 3:]))
        ans = sr1(dns, verbose=0)
        return ans[DNS].an.rdata

    def __is_url_valid(self) -> bool:
        """
        Function to check if URL is valid based on the "Validators" library
        @return: True if URL is valid
        @rtype: bool
        """
        return validators.url(self.url)

    def __str__(self) -> str:
        return self.interface.__str__()

    def __enter__(self):
        """
        Adds the with Communicator as var functionality
        @return: Communicator object
        """
        return self

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """
        Closes session on exit
        @return: None
        """
        self.interface.close_session()

    @property
    def url(self) -> str:
        return self._URL

    @property
    def headers(self) -> dict:
        return self._headers

    @property
    def auth(self) -> tuple:
        return self._auth

    @property
    def cookies(self) -> dict:
        return self._cookies

    @property
    def interface(self) -> Union[SeleniumWrapper, RequestsWrapper]:
        return self._active_interface

    @property
    def hidden(self) -> bool:
        return self._hidden

    @property
    def timeout(self) -> int:
        return self._timeout

    @property
    def base_url(self):
        return self.BASE_URL

    @property
    def webdriver_url(self) -> Union[str, None]:
        return self.interface.webdriver_url

    @url.setter
    def url(self, new_url: str) -> None:
        cpy = self._URL
        self._URL = new_url
        if not self.__is_url_valid():
            self._URL = cpy

    @base_url.setter
    def base_url(self, new_url: str) -> None:
        self.BASE_URL = new_url

    @headers.setter
    def headers(self, new_headers: dict) -> None:
        self._headers = new_headers

    @auth.setter
    def auth(self, new_auth: list) -> None:
        self._auth = new_auth

    @cookies.setter
    def cookies(self, new_cookies: dict) -> None:
        self._cookies = new_cookies

    @interface.setter
    def interface(self, interface: Union[RequestsWrapper, SeleniumWrapper]) -> None:
        self._active_interface = interface

    @hidden.setter
    def hidden(self, hidden: bool) -> None:
        self._hidden = hidden

    @timeout.setter
    def timeout(self, timeout: int) -> None:
        self._timeout = timeout
