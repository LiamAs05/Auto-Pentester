from sys import stderr
from typing import Union
from requests_wrapper import RequestsWrapper
from selenium_wrapper import SeleniumWrapper


# todo add requests_interface.simple_get()
# todo sync requests_interface and selenium_interface (abstract interface class?) (sync function args)
# todo sync try-catch and raise the same errors (unique error for each class inheriting exception)
# todo sync communicator
# todo switch interface (for each) and reload data (cookies, auth, headers, ...) (reload? = True flag)
# todo is_selenium_interface()
# todo check connection (local machine)
# todo ping
# todo nslookup
# todo reverse nslookup
# todo __is_ip_valid() (use in init)
# todo __is_url_valid()

class Communicator:
    def __init__(self, ip: str = "", url: str = "", headers: dict = None,
                 cookies: dict = None, auth: list = None, use_requests_interface=False):
        self._IP = ip
        self._URL = url
        self._headers = headers
        self._auth = auth
        self._cookies = cookies
        if use_requests_interface:
            self._active_interface = RequestsWrapper()
        else:
            self._active_interface = SeleniumWrapper()

    def get(self):
        self.interface.get()

    def simple_get(self):
        self.interface.simple_get()

    def post(self):
        self.interface.post()

    def close_session(self):
        pass

    def refresh_session(self):
        pass

    def is_session_active(self):
        pass

    def set_new_session_cookie(self):
        pass

    def create_new_session(self):
        pass

    def add_header(self, header_name: str, header_val: str) -> None:
        try:
            self.requests_interface.add_header(header_name, header_val)
        except (ValueError, KeyError) as e:
            print(e, file=stderr)
            return

        self.headers[header_name] = header_val

    def remove_header(self, header_name: str):
        self.requests_interface.remove_header(header_name)
        # todo remove header from selenium driver
        del self.headers[header_name]

    def add_cookie(self, cookie_name: str, cookie_value: str):
        try:
            self.requests_interface.add_cookie(cookie_name, cookie_value)
        except (ValueError, KeyError) as e:
            print(e, file=stderr)
            return

        # todo add cookie to selenium driver
        self.selenium_interface.cookies[cookie_name] = cookie_value
        self.cookies[cookie_name] = cookie_value

    def remove_cookie(self, cookie_name: str):
        self.requests_interface.remove_cookie(cookie_name)
        # todo remove cookie from selenium driver
        del self.cookies[cookie_name]

    def get_alert_text(self) -> None:
        pass

    def remove_alerts(self) -> None:
        pass

    def send_keys(self) -> None:
        pass

    def get_element_by_name(self) -> None:
        pass

    def get_element_by_id(self) -> None:
        pass

    def change_auth(self) -> None:
        pass

    def remove_auth(self) -> None:
        pass

    def __str__(self) -> str:
        return self._requests_interface.__str__() + self._selenium_interface.__str__()

    @property
    def ip(self) -> str:
        return self._IP

    @property
    def url(self) -> str:
        return self._URL

    @property
    def headers(self) -> dict:
        return self._headers

    @property
    def auth(self) -> list:
        return self._auth

    @property
    def cookies(self) -> dict:
        return self._cookies

    @property
    def interface(self) -> Union[RequestsWrapper, SeleniumWrapper]:
        return self._active_interface

    @ip.setter
    def ip(self, new_ip: str) -> None:
        self._IP = new_ip

    @url.setter
    def url(self, new_url: str) -> None:
        self._URL = new_url

    @headers.setter
    def headers(self, new_headers: dict) -> None:
        self._headers = new_headers

    @auth.setter
    def auth(self, new_auth: list) -> None:
        self._auth = new_auth

    @cookies.setter
    def cookies(self, new_cookies: dict) -> None:
        self._cookies = new_cookies

    @interface.setter
    def interface(self, interface: Union[RequestsWrapper, SeleniumWrapper]) -> None:
        self._active_interface = interface
