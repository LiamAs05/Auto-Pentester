#! /usr/bin/python3
from requests import Response
from bs4 import BeautifulSoup
import re
from enum import Enum

from src.analyzer.page import Page
from src.analyzer.webElements.form import Form as FormElement
from src.analyzer.webElements.input import Element as InputElement


POST = 'post'


class PageLevel(Enum):
    PLAIN_TEXT_PAGE = 0
    PAGE_WITH_SCRIPTS = 1
    PAGE_WITH_GET_QUERY = 2
    PAGE_WITH_GET_FORM = 3
    PAGE_WITH_SPECIAL_FORM = 4


MIN_INPUTS = 3
USER_NAME_INDEX = 0
PASSWORD_INDEX = 1


username_payloads = [
    'user',
    'name',
    'uname',
    'u-name',
    'username',
    'user-name',
    'mail',
    'login',
    'txtuname'
]

passwords_payloads = [
    'txtpass',
    'password',
    'passwd',
    'pass',
    'pwd',
    'pw',
]


class Classificator:

    @staticmethod
    def classification(page: Page) -> PageLevel:
        """
        Function get a Page instance, and check what the type of the page

        @param page: A page element
        @return: the rank of the page
        """

        for form in page.forms:
            method = form.attributes.get('method', '').lower()
            if method == 'get':
                return PageLevel.PAGE_WITH_GET_QUERY

            if method:
                return PageLevel.PAGE_WITH_SPECIAL_FORM

        if '?' in page.route and '=' in page.route:
            return PageLevel.PAGE_WITH_GET_QUERY

        if page.scripts:
            return PageLevel.PAGE_WITH_SCRIPTS

        return PageLevel.PLAIN_TEXT_PAGE

    @staticmethod
    def _mathc_pattern(string, list_of_patterns) -> bool:
        """
        function get a list of patterns and a string, and check if the string in the patterns

        @param string: string to check
        @param list_of_patterns: patterns to match
        @return: boolean, string in patterns
        """
        string = string.lower()

        for patten in list_of_patterns:
            if re.search(f'.*{patten}.*', string):
                return True

        return False

    @staticmethod
    def is_login_page(response: Response, auth: tuple[str, str]) -> [bool, str, dict[str, str]]:
        """
        function get a GET request response and default auth
        and check if the page is a login page

        @param response: a GET request response
        @param auth: username and password
        @return: is login page (bool), form action, payloads dict (auth)
        """
        payloads = {}
        username_flag = False
        password_flag = False
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = Classificator.get_forms(soup)

        if not forms:
            return False, response.url, payloads

        for form in forms:
            action = form.attributes.get('action', response.url)

            if form.attributes.get('method', 'GET').lower() != POST or len(form.inputs) < MIN_INPUTS:
                continue

            for input_form in form.inputs:
                input_type: str = input_form.attributes.get('type', '')
                input_name = input_form.attributes.get('name', '')

                match input_type:
                    case 'text':
                        if Classificator._mathc_pattern(input_name, username_payloads):
                            payloads[input_name] = auth[USER_NAME_INDEX]
                            username_flag = True

                    case 'password':
                        if Classificator._mathc_pattern(input_name, passwords_payloads):
                            payloads[input_name] = auth[PASSWORD_INDEX]
                            password_flag = True

                    case 'hidden':
                        payloads[input_name] = input_form.attributes.get('value', '')

                    case _:
                        pass

            if username_flag and password_flag:
                return True, action, payloads

            payloads.clear()

        return False, response.url, payloads

    @staticmethod
    def get_forms(soup: BeautifulSoup) -> set[FormElement]:
        """
        FUnction find all the <form> tags in the document

        @param soup: a BeautifulSoup object
        @return: a set of FormElement
        """
        form_ret = set()

        for form in soup.find_all('form'):
            form_element = FormElement()
            form_attributes = FormElement.get_element_attributes()
            for attribute in form_attributes.keys():
                form_attributes[attribute] = form.attrs.get(attribute, form_attributes[attribute])

            form_element.attributes = form_attributes

            # scrape the <input> 's of the form element
            for form_input_element in form.find_all('input'):
                input_element = InputElement()
                input_attributes = input_element.get_element_attributes()

                for attribute in input_attributes.keys():
                    input_attributes[attribute] = form_input_element.attrs.get(attribute, input_attributes[attribute])

                input_element.attributes = input_attributes
                form_element.add_input(input_element)

            form_ret.add(form_element)

        return form_ret
