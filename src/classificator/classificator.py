#! /usr/bin/python3
from requests import Response
from bs4 import BeautifulSoup
import re

from src.analyzer.analyzer import Analyzer
from src.analyzer.page import Page

POST = 'post'
MIN_INPUTS = 3
USER_NAME_INDEX = 0
PASSWORD_INDEX = 1


username_payloads = [
    'user',
    'name',
    'uname',
    'u-name',
    'username',
    'user-name',
    'mail',
    'login',
    'txtuname'
]

passwords_payloads = [
    'txtpass',
    'password',
    'passwd',
    'pass',
    'pwd',
    'pw',
]


class Classificator:

    @staticmethod
    def classification(page: Page) -> int:
        """

        @param page:
        @return:
        """
        return 0

    @staticmethod
    def _mathc_pattern(string, list_of_patterns) -> bool:
        """
        function get a list of patterns and a string, and check if the string in the patterns

        @param string: string to check
        @param list_of_patterns: patterns to match
        @return: boolean, string in patterns
        """
        string = string.lower()

        for patten in list_of_patterns:
            if re.search(f'.*{patten}.*', string):
                return True

        return False

    @staticmethod
    def is_login_page(response: Response, auth: tuple[str, str]) -> [bool, str, dict[str, str]]:
        """
        function get a GET request response and default auth
        and check if the page is a login page

        @param response: a GET request response
        @param auth: username and password
        @return: is login page (bool), form action, payloads dict (auth)
        """
        payloads = {}

        soup = BeautifulSoup(response.text, 'html.parser')
        forms = Analyzer.get_forms(soup)

        if not forms:
            return False, response.url, payloads

        for form in forms:
            action = form.attributes.get('action', response.url)

            if form.attributes.get('method', 'GET').lower() != POST or len(form.inputs) < MIN_INPUTS:
                continue

            for input_form in form.inputs:
                input_type: str = input_form.attributes.get('type', '')
                input_name = input_form.attributes.get('name', '')

                match input_type:
                    case 'text':
                        if Classificator._mathc_pattern(input_name, username_payloads):
                            payloads[input_name] = auth[USER_NAME_INDEX]

                    case 'password':
                        if Classificator._mathc_pattern(input_name, passwords_payloads):
                            payloads[input_name] = auth[PASSWORD_INDEX]

                    case 'hidden':
                        if input_name.lower() == 'csrf-token':
                            payloads[input_name] = input_form.attributes.get('value', '')

                    case _:
                        pass

            if len(payloads) > 1:
                return True, action, payloads

            payloads.clear()

        return False, response.url, payloads
