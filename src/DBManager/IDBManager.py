#! /usr/bin/python3
from abc import ABC, abstractmethod
from enum import Enum


class Modes(Enum):
    LIGHT = 1
    NORMAL = 2
    AGGRESSIVE = 3


class IDBManager(ABC):

    def __init__(self, db_path):
        """
        This function init the database manager
        @param db_path: path to the db
        @return: None
        """
        self._db_path = db_path
        self._db_connection = None

    @abstractmethod
    def open_db(self) -> None:
        """
        This function opens a database
        @return: None
        """
        pass

    @abstractmethod
    def close_db(self) -> None:
        """
        This function closes a database
        @return: None
        """
        pass

    @abstractmethod
    def get_payloads(self, table: str, mode: str) -> list[str]:
        """
        This function retrieves the payloads from a certain table in the database
        @param table: General table
        @param mode: sub table
        @return: list of payloads
        @rtype: list[str]
        """
        pass
