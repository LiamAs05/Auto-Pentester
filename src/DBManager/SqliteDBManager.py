#! /usr/bin/python3
from typing import Union
from os.path import dirname, realpath, join, normpath
from os import sep, pardir
from sqlmodel import Session, create_engine, select

from src.DBManager.Errors import Errors
from src.DBManager.IDBManager import IDBManager
from src.DBManager.Payloads import Payloads


class SqliteDBManager(IDBManager):
    def __init__(self, db_path):
        super().__init__(db_path)
        db_dir = dirname(realpath(__file__))
        sqlite_url = f"sqlite:///{join(normpath(db_dir + sep + pardir), 'payloads.sqlite')}"
        errors_sqlite_url = f"sqlite:///{join(normpath(db_dir + sep + pardir), 'errors.sqlite')}"
        self.__payloads_engine = create_engine(sqlite_url)
        self.__errors_engine = create_engine(errors_sqlite_url)
        self.__payloads_session: Union[Session, None] = None
        self.__errors_session: Union[Session, None] = None

    def open_db(self) -> None:
        """
        Opens a database connection and inits the cursor
        @return: None
        """
        self.__payloads_session = Session(self.__payloads_engine)
        self.__errors_session = Session(self.__errors_engine)

    def close_db(self) -> None:
        """
        Closes the current DB Connection
        @return: None
        """
        if self.__payloads_session.is_active:
            self.__payloads_session.close()

        if self.__errors_session.is_active:
            self.__errors_session.close()

    def get_payloads(self, vulnerability: str, mode: int) -> list[str]:
        """
        Returns an attack payloads list
        @param vulnerability: type of payload
        @param mode: aggressive/normal
        @return: list of payloads
        @rtype: list[str]
        """
        statement = select(Payloads.payload).where(Payloads.vulnerability == vulnerability).where(Payloads.mode == mode)
        payloads = self.__payloads_session.exec(statement).all()
        return payloads

    def get_errors(self) -> list[str]:
        """
        Getting all the errors from the errors database
        @return: a list of sql errors
        @rtype: list[str]
        """
        statement = select(Errors.error)
        payloads = self.__payloads_session.exec(statement).all()
        return payloads
