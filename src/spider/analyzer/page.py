#! /usr/bin/python3
from webElements import a, area, base, form, img, input, link, script


class Page:
    def __init__(self, route: str, title: str, parent: str, children: set[str], auth: tuple,
                 forms: set[form.Element], a_tags: set[a.Element], areas: set[area.Element],
                 bases: set[base.Element], links: set[link.Element], images: set[img.Element],
                 scripts: set[script.Element], cookies: dict, is_session: bool,
                 need_auth: bool, content_type: str):
        self._route = route
        self._title = title
        self._parent = parent
        self._children = children
        self._auth = auth
        self._forms = forms
        self._a_tags = a_tags
        self._areas = areas
        self._bases = bases
        self._links = links
        self._images = images
        self._scripts = scripts
        self._cookies = cookies
        self._is_session = is_session
        self._need_auth = need_auth
        self._content_type = content_type

    @property
    def route(self) -> str:
        return self._route

    @route.setter
    def route(self, value: str) -> None:
        self._route = value

    @property
    def title(self) -> str:
        return self._title

    @title.setter
    def title(self, value: str) -> None:
        self._title = value

    @property
    def parent(self) -> str:
        return self._parent

    @parent.setter
    def parent(self, value: str) -> None:
        self._parent = value

    @property
    def children(self) -> set[str]:
        return self._children

    @children.setter
    def children(self, value: set[str]) -> None:
        self._children = value

    @property
    def auth(self) -> tuple:
        return self._auth

    @auth.setter
    def auth(self, value: tuple) -> None:
        self._auth = value

    @property
    def forms(self) -> set[form.Element]:
        return self._forms

    @forms.setter
    def forms(self, value: set[form.Element]) -> None:
        self._forms = value

    @property
    def a_tags(self) -> set[a.Element]:
        return self._a_tags

    @a_tags.setter
    def a_tags(self, value: set[a.Element]) -> None:
        self._a_tags = value

    @property
    def areas(self) -> set[area.Element]:
        return self._areas

    @areas.setter
    def areas(self, value: set[area.Element]) -> None:
        self._areas = value

    @property
    def bases(self) -> set[base.Element]:
        return self._bases

    @bases.setter
    def bases(self, value: set[base.Element]) -> None:
        self._bases = value

    @property
    def links(self) -> set[link.Element]:
        return self._links

    @links.setter
    def links(self, value: set[link.Element]) -> None:
        self._links = value

    @property
    def images(self) -> set[img.Element]:
        return self._images

    @images.setter
    def images(self, value: set[img.Element]) -> None:
        self._images = value

    @property
    def scripts(self) -> set[script.Element]:
        return self._scripts

    @scripts.setter
    def scripts(self, value: set[script.Element]) -> None:
        self._scripts = value

    @property
    def cookies(self) -> dict:
        return self._cookies

    @cookies.setter
    def cookies(self, value: dict) -> None:
        self._cookies = value

    @property
    def is_session(self) -> bool:
        return self._is_session

    @is_session.setter
    def is_session(self, value: bool) -> None:
        self._is_session = value

    @property
    def need_auth(self) -> bool:
        return self._need_auth

    @need_auth.setter
    def need_auth(self, value: bool) -> None:
        self._need_auth = value

    @property
    def content_type(self) -> str:
        return self._content_type

    @content_type.setters
    def content_type(self, value: str) -> None:
        self._content_type = value
