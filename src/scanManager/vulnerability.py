#! /usr/bin/python3

from enum import Enum


class TypesOfAttacks(int, Enum):
    XSS: int = 1
    CSRF: int = 2
    SQL_INJECTION: int = 3
    COMMAND_INJECTION: int = 4


class Vulnerability:

    def __init__(self, params: dict, type_of_attack: TypesOfAttacks, route: str, triggers: str, output: str):
        self._params = params or dict()
        self._type = type_of_attack
        self._route = route
        self._triggers = triggers
        self._output = output

    def __str__(self) -> str:
        return f"""Vulnerability at {self._route}"""

    @property
    def params(self) -> dict:
        return self._params

    @params.setter
    def params(self, val: dict) -> None:
        self._params = val

    @property
    def type(self) -> TypesOfAttacks:
        return TypesOfAttacks(self._type) if type(self._type) != TypesOfAttacks else self._type

    @type.setter
    def type(self, val: TypesOfAttacks) -> None:
        self._type = val

    @property
    def route(self) -> str:
        return self._route

    @route.setter
    def route(self, val: str) -> None:
        self._route = val

    @property
    def triggers(self) -> str:
        return self._triggers

    @triggers.setter
    def triggers(self, val: str) -> None:
        self._triggers = val

    @property
    def output(self) -> str:
        return self._output

    @output.setter
    def output(self, val):
        self._output = val
