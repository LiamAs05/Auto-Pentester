#! /usr/bin/python3
from threading import Lock
from time import sleep

from requests import Response

from src.scan_manager.injector import Injector
from src.scan_manager.scans.IPentester import IPentester
from src.scan_manager.vulnerability import Vulnerability


class Element(IPentester):
    def scan(self, vulnerable_list: list[Vulnerability], list_lock: Lock) -> None:
        """
        This function is performs an XSS attack.
        @param vulnerable_list: The global list of vulnerabilities
        @param list_lock: list Mutex
        @return: None
        """
        responses = Injector.perform_injection(self._communicator, self._website, self._db_manager, "XSS", self._mode)
        self.check_alert(list(filter(lambda res: "alert" in res.url, responses)))

    def check_alert(self, relevant_urls: list[Response]):
        self._communicator.switch_to_selenium()
        for url in [res.url for res in relevant_urls if "XSS" not in res.url]:
            self._communicator.get(url)
            print(url)
            try:
                print(self._communicator.get_alert_text())
            except Exception:
                pass

    # def __check_success(self, payload: str) -> bool:
    #     """
    #     Checks if the injection succeeded
    #     @param payload: injected payload
    #     @return: True if succeeded
    #     """
    #     is_vulnerable: bool = False
    #     try:
    #         is_vulnerable = self.__check_alert(payload)
    #     except Exception as e:
    #         pass
    #     return is_vulnerable

    # def __check_alert(self, payload: str):
    #     """
    #     Checks if there is a present alert with a special payload in the site
    #     @param payload: injected payload
    #     @return: True if an alert was found
    #     """
    #     return "Vibes" in self._communicator.get_alert_text()


