from urllib.parse import urlparse, parse_qs

from selenium.webdriver.remote.webelement import WebElement

from analyzer.page import Page
from analyzer.webElements.IElement import WebElement as AnalyzerWebElement
from classificator.classificator import PageLevel
from communicator.communicator import Communicator


class Injector:
    @staticmethod
    def __get_selenium_element(communicator: Communicator, inp: AnalyzerWebElement) -> WebElement:
        """
        Extracting the selenium WebElement, to be injected
        @param inp: Analyzer Web Element to be converted
        @return: Injectable WebElement
        """
        if web_id := inp.attributes.get("id", None):
            selenium_input = communicator.get_element_by_id(web_id)
        else:
            selenium_input = communicator.get_element_by_name(inp.get_element_name())
        return selenium_input

    @staticmethod
    def selenium_inject(communicator: Communicator, inp_element: AnalyzerWebElement, payload: str,
                        cookies: dict) -> str:
        communicator.switch_to_selenium()
        communicator.simple_get()
        selenium_inp = Injector.__get_selenium_element(communicator, inp_element)
        communicator.post(data={selenium_inp: payload}, cookies=cookies)
        return communicator.webdriver_url

    @staticmethod
    def get_params(url: str) -> dict:
        """
                Fetches the params in a GET query
                @param url: the full get query
                @return: dictionary of param_key = param_values (in a list)
                """
        params = parse_qs(urlparse(url).query)
        return params

    @staticmethod
    def is_page_injectable(p: Page):
        """
        Checks if the page has injectable properties
        @param p: page object
        @return: True if page is injectable
        """
        return p.type == PageLevel.PAGE_WITH_GET_QUERY or p.type == PageLevel.PAGE_WITH_GENERAL_HTTP_METHOD_FORM

    @staticmethod
    def is_input_injectable(inp: AnalyzerWebElement):
        input_type = inp.attributes.get("type").lower()
        if input_type and input_type != "text":
            return False
        return True
