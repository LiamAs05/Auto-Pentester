from pentesters import XSS, SQLI, CI, CSRF
from threading import Thread


class AttackManager:
    def __init__(self, path: str, attacks: list[str]):
        # todo change None to communicator
        self._xss = XSS.Pentester(None)
        self._sqli = SQLI.Pentester(None)
        self._csrf = CSRF.Pentester(None)
        self._ci = CI.Pentester(None)
        self._current_path = path
        self._attacks_to_use = attacks
        self.__pentest_funcs = {
            "SQLI": self.__search_sqli,
            "CSRF": self.__search_csrf,
            "CI": self.__search_ci,
            "XSS": self.__search_xss
        }

    def initiate_attacks(self):
        threads = []
        for attack in self.attacks_to_use:
            fn = self.__pentest_funcs[attack]
            t = Thread(target=fn)
            t.start()
            threads.append(t)

        for thread in threads:
            thread.join()

    def __search_xss(self):
        return self.xss.attack(self.current_path)

    def __search_ci(self):
        return self.ci.attack(self.current_path)

    def __search_sqli(self):
        return self.sqli.attack(self.current_path)

    def __search_csrf(self):
        return self.csrf.attack(self.current_path)

    @property
    def xss(self) -> XSS.Pentester:
        return self._xss

    @xss.setter
    def xss(self, val: XSS.Pentester) -> None:
        if type(val) == XSS.Pentester:
            self._xss = val

    @property
    def ci(self) -> CI.Pentester:
        return self._ci

    @ci.setter
    def ci(self, val: CI.Pentester) -> None:
        if type(val) == CI.Pentester:
            self._ci = val

    @property
    def sqli(self) -> SQLI.Pentester:
        return self._sqli

    @sqli.setter
    def sqli(self, val: SQLI.Pentester) -> None:
        if type(val) == SQLI.Pentester:
            self._sqli = val

    @property
    def csrf(self) -> CSRF.Pentester:
        return self._csrf

    @csrf.setter
    def csrf(self, val: CSRF.Pentester) -> None:
        if type(val) == CSRF.Pentester:
            self._csrf = val

    @property
    def current_path(self) -> str:
        return self._current_path

    @current_path.setter
    def current_path(self, val: str) -> None:
        self._current_path = val

    @property
    def attacks_to_use(self) -> list[str]:
        return self._attacks_to_use

    @attacks_to_use.setter
    def attacks_to_use(self, val: list[str]) -> None:
        self._attacks_to_use = val
