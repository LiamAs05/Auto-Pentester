#! /usr/bin/python3

from src.attackManager.vulnerability import Vulnerability
from src.attackManager.attacks.IPentester import IPentester
from src.classificator.classificator import Classificator
from src.classificator.classificator import PageLevel
from src.analyzer.page import Page

from threading import Lock


class Element(IPentester):

    def attack(self, vulnerable_list: list[Vulnerability], list_lock: Lock) -> None:
        """
        This function is abstract method of the attack method.

        @param vulnerable_list: The global list of vulnerabilities
        @param list_lock: list Mutex
        @return: None
        """

        # TODO: get all endpoints (forms and api endpoints)
        # TODO: filter endpoints (only static endpoints)
        # TODO: check for cookies/tokens
        # TODO: check for http headers
        # TODO: generate different headers
        # TODO: get the same pages in other session

    def _get_endpoints(self) -> dict[str, Page]:
        """
        Private method, return all pages with interesting forms/endpoints

        @return: dict with csrf vulnerability potential
        """
        endpoints = {}
        for route, page in self._website.get_pages().items():
            if page.type == PageLevel.PLAIN_TEXT_PAGE or page.type == PageLevel.PAGE_WITH_SCRIPTS:
                continue
            endpoints[route] = page

        return endpoints
