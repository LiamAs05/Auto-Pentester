#! /usr/bin/python3
from json import dumps, loads, load
from os.path import isfile, isdir
from sys import stderr
from typing import Union
from src.analyzer.page import Page
from src.spider.website import Website


class InputManager:
    @staticmethod
    def create_json_file() -> str:
        """
        Creating a config.json file for the user upon request
        @return: path of the created file
        """

        if not InputManager.__generate_new_json():
            return ""  # returning empty path and exiting the program

        path = InputManager.__get_input_file_path()

        if not InputManager.__validate_path(path):
            print("This is not a valid directory", file=stderr)
            return ""

        # below are the template json parameters
        to_json = dumps({
            "url": "https://httpbin.org",
            "headers": [],
            "cookies": {},
            "auth": [],
            "use_requests_interface": False,
            "hidden": True,
            "timeout": 10,
            "blacklist": [],
            "max_pages": 100,
            "recursive": True,
            "attacks": ["xss", "csrf", "ci", "sqli"]
        }, indent=4)

        InputManager.__write_json_to_file(to_json, path)
        return path + "config.json"

    @staticmethod
    def parse_input(file_path: str) -> Union[dict, None]:
        """
        Converting a JSON file to a dictionary
        @param file_path: path to json file
        @return: dict if operation succeeds and None if it fails
        """
        with open(file_path, "r") as file:
            content = file.read()
        return loads(content) if not len(content) == 0 else None  # if the file is empty, return None

    @staticmethod
    def check_for_json(argv: list) -> bool:
        """
        This function checks if the argument supplied to the program are valid
        @param argv: arguments supplied to the program
        @return: True if the path supplied leads to a valid JSON file, False else
        """
        condition = len(argv) >= 2 and isfile(argv[1])  # checking if a path was supplied and points to a valid file
        if len(argv) < 2:  # if no path was supplied
            print("Please supply JSON configuration file", file=stderr)

        elif not isfile(argv[1]):  # if path does not exist
            print(f"No file exists at path {argv[1]}", file=stderr)

        return condition

    @staticmethod
    def __generate_new_json():
        """
        Asking the user whether he wants to generate a template JSON file
        @return: True if yes, Else False
        """
        print("Would you like us to generate the missing JSON file with our template file?")
        print("Enter y/yes for yes and any other key for no:", end=" ")
        return bool(input().lower() in ['y', 'yes'])  # converting the user input to bool

    @staticmethod
    def __get_input_file_path() -> str:
        """
        Getting user input for JSON file path
        @return: file path
        @rtype: str
        """
        # path to create file at
        path = input("Enter path for the new JSON file: ")

        # appending '\\' to path in case it's needed
        if not path.endswith('\\') or not path.endswith('/'):
            path += "\\"

        return path

    @staticmethod
    def __write_json_to_file(template: str, path: str) -> None:
        """
        Writing template json to input file
        @param template: Template JSON string
        @param path: Input file path
        @return: None
        """
        with open(path + "config.json", "w") as json_file:
            json_file.write(template)

    @staticmethod
    def __validate_path(path: str) -> bool:
        """
        Checking if the given path is a directory and that it exists
        @param path: Input file path
        @return: True if directory exists
        @rtype: bool
        """
        return isdir(path)

    @staticmethod
    def json_to_site(json: str) -> Website:
        """
        Converts a json to site
        @param json: json website
        @return: Website created from json
        @rtype: str
        """
        parsed = loads(json)
        site = Website(parsed["route"], parsed["cookies"])
        for key, val in parsed.items():
            if key in ["route", "cookies"]:
                continue
            temp_page = Page(val["route"], val.get("title", None), val.get("parent", None), val.get("children", None),
                             val.get("auth", None), val.get("forms", None), val.get("a_tags", None), val.get("areas", None),
                             val.get("bases", None), val.get("links", None), val.get("images", None), val.get("scripts", None),
                             val.get("cookies", None), val.get("is_session", None), val.get("need_auth", None),
                             val.get("content_type", None))
            site.add_page(temp_page)
        return site
