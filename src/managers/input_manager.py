#! /usr/bin/python3
import json
from os.path import isfile
from sys import stderr
from typing import Union


class InputManager:
    @staticmethod
    def parse_input(file_path: str) -> Union[dict, None]:
        """
        Converting a JSON file to a dictionary with necessary checks,
        such as converting "False" and "True" to actual boolean values
        @param file_path: path to json file
        @return: dict if operation succeeds and None if it fails
        """
        with open(file_path, "r") as file:
            content = file.read()
        return json.loads(content) if not len(content) == 0 else None   # if the file is empty, return None

    @staticmethod
    def check_for_json(argv: list) -> bool:
        """
        This function checks if the argument supplied to the program are valid
        @param argv: arguments supplied to the program
        @return: True if the path supplied leads to a valid JSON file, False else
        """
        condition = len(argv) >= 2 and isfile(argv[1])  # checking if a path was supplied and points to a valid file
        if len(argv) < 2:  # if no path was supplied
            print("Please supply JSON configuration file", file=stderr)

        elif not isfile(argv[1]):  # if path does not exist
            print(f"No file exists at path {argv[1]}", file=stderr)

        return condition

    @staticmethod
    def generate_json() -> str:
        """
        Creating a config.json file for the user upon request
        @return: path of the created file
        """
        print("Would you like us to generate the missing JSON file with our template file?")
        print("Enter y/yes for yes and any other key for no:", end=" ")
        res = bool(input().lower() in ['y', 'yes'])  # converting the user input to bool

        if not res:
            return ""  # returning empty path and exiting the program

        # below are the template json parameters
        to_json = {
            "url": "https://httpbin.org",
            "headers": [],
            "cookies": {},
            "auth": [],
            "use_requests_interface": False,
            "hidden": True,
            "timeout": 10,
            "blacklist": [],
            "max_pages": 100,
            "recursive": True,
            "attacks": ["xss", "csrf", "ci", "sqli"]
        }

        # path to create file at
        path = input("Enter path for the new JSON file: ")

        # appending '\\' to path in case it's needed
        if not path.endswith('\\') or not path.endswith('/'):
            path += "\\"

        # finally, writing the json template to the file
        with open(path + "config.json", "w") as json_file:
            json_file.write(json.dumps(to_json))

        return path + "config.json"
