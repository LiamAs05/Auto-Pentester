#! /usr/bin/python3

from src.scanmanager.vulnerability import Vulnerability
from src.communicator.communicator import Communicator
from src.spider.website import Website
from src.dbmanager.IDBManager import IDBManager

from abc import ABC, abstractmethod
from copy import deepcopy
from threading import Lock


class IPentester(ABC):
    def __init__(self, communicator: Communicator, website: Website, db_manager: IDBManager, json_path: str, mode: int):
        """
        This function initializes the pentesting interface class
        @param communicator: Instance of the Communicator
        @param website: Instance of the website
        @param db_manager: connection to DB
        @param mode: attack mode
        """
        self._communicator = deepcopy(communicator)
        self._website = deepcopy(website)
        self._vulnerable_pages = []
        self._db_manager = db_manager

        self._db_manager.open_db()
        self._mode = mode
        self._json_path = json_path

    @abstractmethod
    def attack(self, vulnerable_list: list[Vulnerability], list_lock: Lock) -> None:
        """
        This function is abstract method of the attack method.

        @param vulnerable_list: The global list of vulnerabilities
        @param list_lock: list Mutex
        @return: None
        """
        pass
