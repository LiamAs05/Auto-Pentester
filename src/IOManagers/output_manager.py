#! /usr/bin/python3
from json import dumps
from os import getcwd
from os.path import join
from colorama import Fore, Style
from src.spider.website import Website


class OutputManager:
    @staticmethod
    def extract_info(input_file_path: str, attacks_used: list[str], url: str, pages_found: list[str]) -> None:
        """
        This function is responsible for extracting info from the various IOManagers/attackers,
        and outputting it nicely for the user to a stream of choice
        @params input_file_path, attacks_used, url: info-only, printed parameters for the output
        @return: None
        """
        # this string is the output of our program
        output = dumps({
            "Configuration File": input_file_path,
            "Attacks Used": attacks_used,
            "Site": url,
            "Pages Found": pages_found
        }, indent=4)

        if OutputManager._redirect_output():  # if the user wants to output to file instead of the console
            OutputManager._output_to_file(output)
        else:
            OutputManager._output_to_console(output)

    @staticmethod
    def site_to_json(site: Website) -> str:
        """
        Converts a site to json
        @param site: website object
        @return: json of the converted site
        @rtype: str
        """
        to_json = {
            "route": site.base_url,
            "cookies": site.cookies,
        }
        pages = site.get_pages()
        for key, val in pages.items():
            pages[key] = val.to_json()
        merged = to_json | pages
        return dumps(merged, indent=4)

    @staticmethod
    def _redirect_output() -> bool:
        """
        This function is a private function of the output manager
        it's sole purpose is to ask the user where he wants his output to appear
        @return: True for file, False for console (stdout)
        """
        out_choice = input(f"{Fore.LIGHTBLUE_EX}Would you like to output the report to a file?\n"
                           f"Choose {Fore.RED}f/F {Fore.LIGHTBLUE_EX}"
                           f"for file and any other key for the console:{Style.RESET_ALL} ")
        return out_choice.lower() == 'f'

    @staticmethod
    def _vulnerabilities_to_json() -> None:
        pass  # will not be implemented before attack IOManagers

    @staticmethod
    def _output_to_file(output: str) -> None:
        """
        This function outputs the JSON to a file of choice
        @param output: JSON string
        @return: None
        """
        output_path = join(getcwd(), "result.json")
        with open(output_path, "w") as file:
            file.write(output)  # writing to the file

    @staticmethod
    def _output_to_console(output: str) -> None:
        """
        This function outputs the JSON to the console
        @param output: JSON string
        @return: None
        """
        print(f"{Fore.GREEN}")  # a little game of colors to print nicer
        print(output)
        print(f"{Style.RESET_ALL}")
