from abc import ABC, abstractmethod


class IDBManager(ABC):
    def __init__(self, db):
        self._db_cursor = db

    @abstractmethod
    def open_db(self, db_path: str) -> None:
        """
        This function opens a database
        @param db_path: path to a local database file
        @return: None
        """
        pass

    @abstractmethod
    def close_db(self, db_path: str) -> None:
        """
        This function closes a database
        @param db_path: path to a local database file
        @return: None
        """
        pass

    @abstractmethod
    def get_payloads(self, table: str, mode: str) -> list[str]:
        """
        This function retrieves the payloads from a certain table in the database
        @param table: General table
        @param mode: sub table
        @return: list of payloads
        @rtype: list[str]
        """
        pass

    @property
    def db_cursor(self):
        return self._db_cursor

    @db_cursor.setter
    def db_cursor(self, val) -> None:
        self._db_cursor = val
