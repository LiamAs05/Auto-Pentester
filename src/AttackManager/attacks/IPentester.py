#! /usr/bin/python3

from abc import ABC, abstractmethod
from src.AttackManager.vulnerability import Vulnerability
from src.communicator.communicator import Communicator
from src.spider.website import Website

from threading import Lock
from src.DBManager.IDBManager import IDBManager

from copy import deepcopy


class IPentester(ABC):
    def __init__(self, communicator: Communicator, website: Website, db_manager: IDBManager):
        """
        This function init the Pen-tester interface class
        @param communicator: Instance of the Communicator
        @param website: Instance of the website
        @param db_manager: connection to DB
        """
        self._communicator = deepcopy(communicator)
        self._website = deepcopy(website)
        self._vulnerable_pages = []
        self._db_manager = db_manager

        self._db_manager.open_db()

    @abstractmethod
    def attack(self, vulnerable_list: list[Vulnerability], list_lock: Lock) -> None:
        """
        This function is abstract method of the attack method.

        @param vulnerable_list: The global list of vulnerabilities
        @param list_lock: list Mutex
        @return: None
        """
        pass
