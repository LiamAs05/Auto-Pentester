#! /usr/bin/python3


from src.attackManager.vulnerability import Vulnerability
from src.attackManager.vulnerability import TypesOfAttacks
from src.attackManager.attacks.IPentester import IPentester

from threading import Lock


class Element(IPentester):

    def attack(self, vulnerable_list: list[Vulnerability], list_lock: Lock) -> None:
        """
        This function is abstract method of the attack method.

        @param vulnerable_list: The global list of vulnerabilities
        @param list_lock: list Mutex
        @return: None
        """

        # TODO: ERROR, PASS, SLEEP

        for route, page in self._get_endpoints().items():
            if condition:
                v = Vulnerability({}, TypesOfAttacks.SQL_INJECTION, route, "<ERROR>", "")
                self._vulnerable_pages.append(v)

        list_lock.acquire()
        vulnerable_list.extend(self._vulnerable_pages)
        list_lock.release()
