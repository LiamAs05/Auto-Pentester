#! /usr/bin/python3

from src.spider.website import Website
from src.attackManager.vulnerability import Vulnerability
from src.plugins_manager import PluginManager
from src.communicator.communicator import Communicator
from src.attackManager.attacks.IPentester import IPentester
from threading import Thread, Lock
from src.DBManager.IDBManager import IDBManager


class AttackManager:
    def __init__(self, website: Website, communicator: Communicator, db_manager: IDBManager, json_path: str) -> None:
        """
        function init the attack manager

        @param website: A website obj
        @param communicator: Instance of the communicator
        @param db_manager: database manager
        """
        self._vulnerable_pages = []
        self._vulnerable_pages_lock = Lock()
        self._communicator = communicator
        self._website = website
        self._attackers: list[type] = PluginManager.get_plugins(json_path, "attacks", IPentester)
        self._db_manager = db_manager

    def run(self) -> None:

        threads = []

        for attacker in self._attackers:
            attacker_instance = attacker(self._communicator, self._website, self._db_manager)
            t = Thread(
                target=attacker_instance.attack,
                args=(
                    self._vulnerable_pages,
                    self._vulnerable_pages_lock,
                     )
            )
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

    @property
    def vulnerable_pages(self) -> list[Vulnerability]:
        return self._vulnerable_pages
