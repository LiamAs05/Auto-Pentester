#! /usr/bin/python3
from src.analyzer.web_elements import a, area, form, img
from src.analyzer.web_elements import script, base, link
from src.analyzer.web_elements.IElement import WebElement

from enum import Enum
from requests import Response


class PageLevel(Enum):
    PLAIN_TEXT_PAGE = 0
    PAGE_WITH_SCRIPTS = 1
    PAGE_WITH_GET_QUERY = 2
    PAGE_WITH_GET_FORM = 3
    PAGE_WITH_GENERAL_HTTP_METHOD_FORM = 4
    LOGIN_PAGE = 5
    LOGOUT_PAGE = 6


class Page:
    def __init__(self, response: Response, route: str, title: str = "", parent: str = "",
                 children: set[str] = None, auth: tuple = (),
                 forms: set[form.Form] = None, a_tags: set[a.Element] = None, areas: set[area.Element] = None,
                 bases: set[base.Element] = None, links: set[link.Element] = None,
                 images: set[img.Element] = None, scripts: set[script.Element] = None, cookies: dict = None,
                 is_session: bool = False, need_auth: bool = False, content_type: str = ""):

        self._response = response
        self._route = route
        self._title = title
        self._parent = parent
        self._auth = auth
        self._children = children or set()
        self._forms = forms or set()
        self._a_tags = a_tags or set()
        self._areas = areas or set()
        self._bases = bases or set()
        self._links = links or set()
        self._images = images or set()
        self._scripts = scripts or set()
        self._cookies = cookies or dict()

        # store all the new element from the plugin system
        # element name: set[element, element, ...]

        self._general_elements = dict()
        self._is_session = is_session
        self._need_auth = need_auth
        self._content_type = content_type
        self._type = None

    def add_element(self, elements: set[WebElement]) -> None:
        """
        Adding an element to a page
        @param elements: all elements
        @return: None
        """
        if not elements:
            return
        popped_elem = elements.pop()
        elements.add(popped_elem)

        if popped_elem.get_element_name() in self._general_elements:
            self._general_elements[popped_elem.get_element_name()].append(elements)
        else:
            self._general_elements[popped_elem.get_element_name()] = elements

    def to_json(self) -> dict:
        """
        Parsing page into a json format and returning it
        @return: json dict
        """
        page_json = {
            "route": self.route,
            "title": self.title,
            "parent": self.parent,
            "children": list(self.children),
            "auth": self.auth,
            "forms": [obj_form.to_json() for obj_form in self.forms],
            "a_tags": [obj_a.to_json() for obj_a in self.a_tags],
            "areas": [obj_area.to_json() for obj_area in self.areas],
            "bases": [obj_base.to_json() for obj_base in self.bases],
            "links": [obj_link.to_json() for obj_link in self.links],
            "images": [obj_img.to_json() for obj_img in self.images],
            "scripts": [obj_script.to_json() for obj_script in self.scripts],
            "cookies": self.cookies,
            "is_session": self.is_session,
            "need_auth": self.need_auth,
            "content_type": self.content_type,
            "type": self.type,
            "general_elements": {
                elem_name: [elem.to_json() for elem in elems]
                for elem_name, elems in self.general_elements.items()
            }
        }

        return page_json

    def __str__(self):
        return f"""Page Stats ->
        Route: {self.route}
        Title: {self.title}
        Type: {self.type}
        """

    @property
    def response(self):
        return self._response

    @response.setter
    def response(self, value: Response):
        self._response = value

    @property
    def general_elements(self) -> dict[str, list[WebElement]]:
        return self._general_elements

    @property
    def route(self) -> str:
        return self._route

    @route.setter
    def route(self, value: str) -> None:
        self._route = value

    @property
    def title(self) -> str:
        return self._title

    @title.setter
    def title(self, value: str) -> None:
        self._title = value

    @property
    def parent(self) -> str:
        return self._parent

    @parent.setter
    def parent(self, value: str) -> None:
        self._parent = value

    @property
    def children(self) -> set[str]:
        return self._children

    @children.setter
    def children(self, value: set[str]) -> None:
        self._children = value

    @property
    def auth(self) -> tuple:
        return self._auth

    @auth.setter
    def auth(self, value: tuple) -> None:
        self._auth = value

    @property
    def forms(self) -> set[form.Form]:
        return self._forms

    @forms.setter
    def forms(self, value: set[form.Form]) -> None:
        self._forms = value

    @property
    def a_tags(self) -> set[a.Element]:
        return self._a_tags

    @a_tags.setter
    def a_tags(self, value: set[a.Element]) -> None:
        self._a_tags = value

    @property
    def areas(self) -> set[area.Element]:
        return self._areas

    @areas.setter
    def areas(self, value: set[area.Element]) -> None:
        self._areas = value

    @property
    def bases(self) -> set[base.Element]:
        return self._bases

    @bases.setter
    def bases(self, value: set[base.Element]) -> None:
        self._bases = value

    @property
    def links(self) -> set[link.Element]:
        return self._links

    @links.setter
    def links(self, value: set[link.Element]) -> None:
        self._links = value

    @property
    def images(self) -> set[img.Element]:
        return self._images

    @images.setter
    def images(self, value: set[img.Element]) -> None:
        self._images = value

    @property
    def scripts(self) -> set[script.Element]:
        return self._scripts

    @scripts.setter
    def scripts(self, value: set[script.Element]) -> None:
        self._scripts = value

    @property
    def cookies(self) -> dict:
        return self._cookies

    @cookies.setter
    def cookies(self, value: dict) -> None:
        self._cookies = value

    @property
    def is_session(self) -> bool:
        return self._is_session

    @is_session.setter
    def is_session(self, value: bool) -> None:
        self._is_session = value

    @property
    def need_auth(self) -> bool:
        return self._need_auth

    @need_auth.setter
    def need_auth(self, value: bool) -> None:
        self._need_auth = value

    @property
    def content_type(self) -> str:
        return self._content_type

    @property
    def type(self) -> PageLevel:
        return self._type

    @type.setter
    def type(self, value: PageLevel) -> None:
        self._type = value

    def __getitem__(self, key):
        attributes = vars(self)
        return attributes.get('_' + key, None)

    def __setitem__(self, key, value):
        attributes = vars(self)
        if '_' + key in attributes:
            attributes['_' + key].add(value)
