#! /usr/bin/python3
import os.path
from json import dumps, loads
from os.path import isfile, isdir, join
from sys import stderr
from time import sleep
from typing import Union

from src.analyzer.page import Page
from src.spider.website import Website

ARGV_PATH_LENGTH = 2
JSON_INDEX = 1
INDENT_LEVEL = 4

class InputManager:
    @staticmethod
    def create_json_file(json_path: str) -> str:
        """
        Creating a config.json file for the user upon request
        @param json_path: desired path for config file
        @return: path config file was created at
        """
        if not InputManager.__generate_new_json():
            return ""  # returning empty path and exiting the program

        path = os.path.dirname(json_path)
        if not InputManager.__validate_path(path):
            print("This is not a valid directory", file=stderr)
            return ""

        url = input("Enter website URL: ")

        # below are the template json parameters
        to_json = dumps({
            "url": url,
            "headers": [],
            "cookies": {},
            "auth": [],
            "use_requests_interface": True,
            "hidden": True,
            "timeout": 10,
            "blacklist": [],
            "max_pages": 100,
            "recursive": True,
            "plugins":
                [
                    "src.analyzer.web_elements.a",
                    "src.analyzer.web_elements.area",
                    "src.analyzer.web_elements.base",
                    "src.analyzer.web_elements.button",
                    "src.analyzer.web_elements.img",
                    "src.analyzer.web_elements.link",
                    "src.analyzer.web_elements.script"
                ],
            "scans":
                [
                    "src.scan_manager.scans.xss",
                    "src.scan_manager.scans.csrf",
                    "src.scan_manager.scans.sqli",
                    "src.scan_manager.scans.ci"
                ]
        }, indent=INDENT_LEVEL)

        path = join(path, "config.json")
        InputManager.__write_json_to_file(to_json, path)

        return path

    @staticmethod
    def parse_input(file_path: str) -> Union[dict, None]:
        """
        Converting a JSON file to a dictionary
        @param file_path: path to json file
        @return: dict if operation succeeds and None if it fails
        """
        with open(file_path, "r") as file:
            content = file.read()
        return loads(content) if len(content) else None  # if the file is empty, return None

    @staticmethod
    def check_for_json(json_path: str) -> bool:
        """
        This function checks if the argument supplied to the program are valid
        @param json_path: path to json config file
        @return: True if the path supplied leads to a valid JSON file, False else
        """
        if not isfile(json_path):  # if path does not exist
            print(f"No file exists at path {json_path}", file=stderr)
            sleep(0.1)
            return False

        return True

    @staticmethod
    def __generate_new_json():
        """
        Asking the user whether he wants to generate a template JSON file
        @return: True if yes, Else False
        """
        print("Would you like us to generate the missing JSON file with our template file?")
        print("Enter y/yes for yes and any other key for no:", end=" ")
        return bool(input().lower() in ['y', 'yes'])  # converting the user input to bool

    @staticmethod
    def __write_json_to_file(template: str, path: str) -> None:
        """
        Writing template json to input file
        @param template: Template JSON string
        @param path: Input file path
        @return: None
        """
        with open(path, "w") as json_file:
            json_file.write(template)

    @staticmethod
    def __validate_path(path: str) -> bool:
        """
        Checking if the given path is a directory and that it exists
        @param path: Input file path
        @return: True if directory exists
        @rtype: bool
        """
        return isdir(path)

    @staticmethod
    def json_to_site(json: str) -> Website:
        """
        Converts a json to site
        @param json: json representing class 'Website'
        @return: Website object
        @rtype: Website
        """
        parsed = loads(json)
        site = Website(parsed.get("route"), parsed.get("cookies"))
        for key, val in parsed.items():
            if key in ["route", "cookies"]:
                continue
            temp_page = Page(val.get("route"), val.get("title"), val.get("parent"), val.get("children"),
                             val.get("auth"), val.get("forms"), val.get("a_tags"), val.get("areas"),
                             val.get("bases"), val.get("links"), val.get("images"), val.get("scripts"),
                             val.get("cookies"), val.get("is_session"), val.get("need_auth"),
                             val.get("content_type"))
            site.add_page(temp_page)
        return site
