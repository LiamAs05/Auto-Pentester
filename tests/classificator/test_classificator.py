#! /usr/bin/python3

import unittest

import requests
import threading
import os

from src.spider.plugins_manager import PluginManager
from src.classificator.classificator import Classificator
from src.analyzer.analyzer import Analyzer


def get_page(self, url):
    res = requests.get(url)
    p = os.getcwd() + '/../../src/spider/plugins.json'
    elements = PluginManager.get_plugins(p)
    pages = set()
    route_to_parse = dict()
    blacklist = set()

    l1 = threading.Lock()
    l2 = threading.Lock()
    auth = ('user', 'pass')
    Analyzer.parse_page(res, url, url, url, elements, pages, route_to_parse, blacklist, l1, l2, auth,True, True)
    return pages.pop()


class MyTestClassificator(unittest.TestCase):

    def test_classification(self):
        pass
        # todo: get page function and then call classification and assert equal

    def test_is_login(self):
        auth = ('username', 'password')

        login_urls = [
            'https://myuncchart.org/MyChart/Authentication/Login?',
            'https://myhealthatvanderbilt.com/Authentication/Login?',
            'https://dribbble.com/session/new?return_to=%2Ftags%2Flogin',
            'https://www.ssbjk.org.in/login.aspx'
        ]

        just_urls = [
            'https://google.com',
            'https://reddit.com',
            'https://ynet.co.il'
        ]

        for login_url in login_urls:
            res = requests.get(login_url)
            is_login, action, payloads = Classificator.is_login_page(res, auth)

            self.assertTrue(is_login)

        for login_url in just_urls:
            res = requests.get(login_url)
            is_login, action, payloads = Classificator.is_login_page(res, auth)

            self.assertFalse(is_login)


if __name__ == '__main__':
    unittest.main()
