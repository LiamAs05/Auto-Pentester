import unittest
from src.communicator.requests_wrapper import RequestsWrapper


class HeadersTestCase(unittest.TestCase):
    def test_add_header(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_headers = wrapper.session.headers.copy()

        wrapper.add_header("Hello", "World")
        self.assertNotEqual(curr_headers, wrapper.session.headers)

    def test_remove_header(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_headers = wrapper.session.headers.copy()

        wrapper.add_header("Hello", "World")
        self.assertNotEqual(curr_headers, wrapper.session.headers)
        wrapper.remove_header("Hello")
        self.assertEqual(curr_headers, wrapper.session.headers)

    def test_empty_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_headers = wrapper.session.headers.copy()
        try:
            wrapper.add_header("", "This should not work")
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_headers = wrapper.session.headers.copy()

        try:
            wrapper.add_header(None, "This should not work either")
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_headers = wrapper.session.headers.copy()

        try:
            wrapper.add_header("This should also throw", None)
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class CookiesTestCase(unittest.TestCase):
    def test_add_cookie(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_cookies = wrapper.session.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.session.cookies)

    def test_remove_cookie(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_cookies = wrapper.session.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.session.cookies)
        wrapper.remove_cookie("Hello")
        self.assertEqual(curr_cookies, wrapper.session.cookies)

    def test_empty_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_cookies = wrapper.session.cookies.copy()
        try:
            wrapper.add_cookie("", "This should not work")
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_cookies = wrapper.session.cookies.copy()

        try:
            wrapper.add_cookie(None, "This should not work either")
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        curr_cookies = wrapper.session.cookies.copy()

        try:
            wrapper.add_cookie("This should also throw", None)
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class GetRequestTesting(unittest.TestCase):
    def test_get(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com", list())
        res = wrapper.get()
        #self.assertEqual(type(res), Response)


if __name__ == '__main__':
    unittest.main()
