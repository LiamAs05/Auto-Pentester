#! /usr/bin/python3
import unittest
from unittest.mock import patch
from src.IOManagers.input_manager import InputManager
from src.IOManagers.output_manager import OutputManager
from os import getcwd, remove
from os.path import join, isfile
from json import loads

from src.AttackManager.vulnerability import Vulnerability, TypesOfAttacks


class TestIO(unittest.TestCase):
    @patch('builtins.input', return_value='yes')
    def test_input_manager(self, inp):
        self.assertFalse(InputManager.check_for_json(["program name", r"/ThisDoesNotExist"]))
        self.assertFalse(InputManager.check_for_json(["program name"]))
        self.assertFalse(InputManager.check_for_json([]))
        with open("test.json", "w") as f:
            self.assertTrue(InputManager.check_for_json(["program name", join(getcwd(), "test.json")]))
        remove("test.json")
        path = InputManager.create_json_file()
        self.assertTrue(InputManager.check_for_json(["program name", join(getcwd(), "config.json")]))
        self.assertTrue(isfile(path))
        with open(path, "r") as f:
            d = {
                "url": "https://httpbin.org",
                "headers": [],
                "cookies": {},
                "auth": [],
                "use_requests_interface": False,
                "hidden": True,
                "timeout": 10,
                "blacklist": [],
                "max_pages": 100,
                "recursive": True,
                "attacks_to_use": ["xss", "csrf", "ci", "sqli"],
                "plugins":
                [
                    "src.analyzer.webElements.a",
                    "src.analyzer.webElements.area",
                    "src.analyzer.webElements.base",
                    "src.analyzer.webElements.button",
                    "src.analyzer.webElements.img",
                    "src.analyzer.webElements.link",
                    "src.analyzer.webElements.script"
                ],
                "attacks":
                [
                    "src.AttackManager.attacks.<attack .py file>"
                ]
            }
            self.assertEqual(loads(f.read()), d)
        remove(path)

    @patch('builtins.input', return_value='f')
    def test_output_manager(self, inp):
        path = "SomePath"
        inp_json = {
            "url": "https://httpbin.org",
            "headers": [],
            "cookies": {},
            "auth": [],
            "use_requests_interface": False,
            "hidden": True,
            "timeout": 10,
            "blacklist": [],
            "max_pages": 100,
            "recursive": True,
            "attacks": ["xss", "csrf", "ci", "sqli"]
        }
        vuln = Vulnerability({"bla": "bla"}, 2, "Vuln!", "sometrigger", "someoutput")

        OutputManager.extract_info(path, inp_json.get("attacks"), inp_json.get("url"), [], [vuln])
        out_path = join(getcwd(), "result.json")
        with open(out_path, "r") as f:
            s = f.read()
            self.assertTrue(len(s) > 0)
            self.assertIn(inp_json.get("url"), s)
            for attack in inp_json.get("attacks"):
                self.assertIn(attack, s)
            print(s)
        remove(out_path)


if __name__ == '__main__':
    unittest.main()
