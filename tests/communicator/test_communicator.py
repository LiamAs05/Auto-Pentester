#! /usr/bin/python3

import unittest
from requests import Response

from src.communicator.communicator import Communicator

from time import sleep

from src.communicator.selenium_wrapper import SeleniumWrapper
from selenium.common.exceptions import NoAlertPresentException
from selenium.common.exceptions import NoSuchElementException
from urllib3.exceptions import MaxRetryError
from selenium.webdriver.remote.webelement import WebElement

BASE_URL = 'http://127.0.0.1:5000'
INDEX = BASE_URL + '/'
SET_DEFAULT_COOKIE = BASE_URL + '/set_default_cookie'
SET_COOKIE = BASE_URL + '/set_cookie'
GET_COOKIE = BASE_URL + '/get_cookie'
GOOD_COOKIE = BASE_URL + '/good_cookie'
SET_INVALID_COOKIE = BASE_URL + '/set_invalid_cookie'
ALERT_COOKIE = BASE_URL + '/alert_cookie'
FORM_PAGE = BASE_URL + '/form_page'
MANY_ALERTS = BASE_URL + '/many_alerts'

DEFAULT_COOKIE = 'DEFAULT_COOKIE'
INVALID_COOKIE = 'INVALID_COOKIE'
SESSION_TIMEOUT_COOKIE = 'TIMEOUT_COOKIE'

WAIT_FOR = 5.1
COOKIE_NAME = 'Name'

ID_ONE = 'id_one'
ID_TWO = 'id_two'

NAME_ONE = 'inputOne'
NAME_TWO = 'inputTwo'

CONSTANT_PAYLOAD = 'A99B'


class CommunicatorTest(unittest.TestCase):
    pass
    # todo: implement tests for communicator


class HeadersTestCase(unittest.TestCase):
    def test_add_header(self):
        with Communicator("https://stackoverflow.com", use_requests_interface=True) as wrapper:
            wrapper.add_header("Content-Type", "application/json")

            curr_headers = wrapper.headers.copy()

            wrapper.add_header("Hello", "World")
            self.assertNotEqual(curr_headers, wrapper.headers)

    def test_remove_header(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_headers = wrapper.headers.copy()

        wrapper.add_header("Hello", "World")
        self.assertNotEqual(curr_headers, wrapper.headers)
        wrapper.remove_header("Hello")
        self.assertEqual(curr_headers, wrapper.headers)

    def test_empty_key(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_headers = wrapper.headers.copy()
        try:
            wrapper.add_header("", "This should not work")
            self.assertEqual(curr_headers, wrapper.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_headers = wrapper.headers.copy()

        try:
            wrapper.add_header(None, "This should not work either")
            self.assertEqual(curr_headers, wrapper.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_headers = wrapper.headers.copy()

        try:
            wrapper.add_header("This should also throw", None)
            self.assertEqual(curr_headers, wrapper.headers)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class CookiesTestCase(unittest.TestCase):
    def test_add_cookie(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_cookies = wrapper.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.cookies)

    def test_remove_cookie(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_cookies = wrapper.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.cookies)
        wrapper.remove_cookie("Hello")
        self.assertEqual(curr_cookies, wrapper.cookies)

    def test_empty_key(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_cookies = wrapper.cookies.copy()
        try:
            wrapper.add_cookie("", "This should not work")
            self.assertEqual(curr_cookies, wrapper.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_cookies = wrapper.cookies.copy()

        try:
            wrapper.add_cookie(None, "This should not work either")
            self.assertEqual(curr_cookies, wrapper.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = Communicator("https://stackoverflow.com", use_requests_interface=True)
        curr_cookies = wrapper.cookies.copy()

        try:
            wrapper.add_cookie("This should also throw", None)
            self.assertEqual(curr_cookies, wrapper.cookies)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class RequestTestCase(unittest.TestCase):
    def test_init(self):
        wrapper = Communicator("https://www.youtube.com/watch", use_requests_interface=True)
        sec_wrapper = Communicator("https://www.youtube.com/watch",
                                   use_requests_interface=True,
                                   headers={"Hello": "World"})
        self.assertNotEqual(wrapper.headers, sec_wrapper.headers)
        self.assertEqual(wrapper.cookies, sec_wrapper.cookies)
        wrapper.close_session()
        wrapper = Communicator("https://www.youtube.com/watch",
                               use_requests_interface=True,
                               cookies={"Haha": "Inequality"})
        self.assertNotEqual(wrapper.headers, sec_wrapper.headers)

    def test_get(self):
        wrapper = Communicator("https://www.youtube.com/watch", use_requests_interface=True)
        res = wrapper.get(params={"v": "fHI8X4OXluQ"})
        self.assertEqual(type(res), Response)
        self.assertEqual(wrapper.url, "https://www.youtube.com/watch/")
        self.assertEqual(res.url, "https://www.youtube.com/watch/?v=fHI8X4OXluQ")
        self.assertIn("Blinding Lights", res.text)

    def test_post(self):
        wrapper = Communicator("https://httpbin.org/anything", use_requests_interface=True)
        res = wrapper.post(data={"Hello": "World!"})
        self.assertEqual(type(res), Response)
        self.assertEqual(res.url, "https://httpbin.org/anything/")


class TestSeleniumWrapper(unittest.TestCase):
    def test_get(self):
        wrapper = Communicator(INDEX)

        wrapper.get()
        self.assertEqual(wrapper.url, INDEX)

        wrapper.get(GOOD_COOKIE)
        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.simple_get(ALERT_COOKIE, cookies={'name': COOKIE_NAME, 'value': 'COOKIE'})
        self.assertEqual(wrapper.get_alert_text(), 'COOKIE')

        wrapper.simple_get(MANY_ALERTS)
        self.assertEqual(wrapper.get_alert_text(), '1')

        wrapper.remove_alerts()

        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.close_session()

    def test_post(self):
        wrapper = Communicator(FORM_PAGE)

        wrapper.get(url=FORM_PAGE)
        data = dict()
        data[wrapper.get_element_by_id(ID_ONE)] = CONSTANT_PAYLOAD
        data[wrapper.get_element_by_id(ID_TWO)] = CONSTANT_PAYLOAD

        wrapper.post(url=FORM_PAGE, data=data)
        self.assertEqual(wrapper.get_alert_text(), CONSTANT_PAYLOAD)

        wrapper.get(url=FORM_PAGE)

        data = dict()
        self.assertRaises(ValueError, wrapper.post, data)

        wrapper.close_session()

    def test_get_alert_text(self):
        wrapper = Communicator(MANY_ALERTS)

        wrapper.simple_get(url=MANY_ALERTS)

        for i in range(1, 5):
            self.assertEqual(wrapper.get_alert_text(), str(i))

        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.close_session()

    def test_new_session(self):
        wrapper = Communicator(GET_COOKIE)

        wrapper.get()

        self.assertIn(GET_COOKIE, wrapper.url)

        cookies = wrapper.cookies

        wrapper.create_new_session()

        self.assertNotEqual(cookies, wrapper.cookies)

        wrapper.create_new_session(INDEX, cookies)

        self.assertEqual(wrapper.cookies, cookies)

        wrapper.close_session()

    def test_close_session(self):
        wrapper = Communicator(BASE_URL)
        wrapper.close_session()
        self.assertRaises(MaxRetryError, wrapper.get, url=INDEX)

    def test_is_session_active(self):
        wrapper = Communicator(SET_COOKIE)
        wrapper.get()
        wrapper.get(INDEX)

        self.assertTrue(wrapper.is_session_active())

        sleep(WAIT_FOR)

        self.assertFalse(wrapper.is_session_active())

        wrapper.close_session()

    def test_refresh(self):
        wrapper = Communicator(SET_DEFAULT_COOKIE)

        wrapper.get(url=SET_DEFAULT_COOKIE)
        self.assertTrue(wrapper.is_session_active())

        wrapper.get(url=INDEX)

        sleep(WAIT_FOR)

        self.assertFalse(wrapper.is_session_active())
        wrapper.close_session()

    def test_get_element_by_id(self):
        wrapper = Communicator(FORM_PAGE)

        wrapper.get(url=FORM_PAGE)

        self.assertIsInstance(wrapper.get_element_by_id(ID_ONE), WebElement)
        self.assertIsInstance(wrapper.get_element_by_id(ID_TWO), WebElement)
        self.assertRaises(NoSuchElementException, wrapper.get_element_by_id, '')

        wrapper.close_session()

    def test_get_element_by_name(self):
        wrapper = Communicator(FORM_PAGE)

        wrapper.get(url=FORM_PAGE)

        self.assertIsInstance(wrapper.get_element_by_name(name=NAME_ONE), WebElement)
        self.assertIsInstance(wrapper.get_element_by_name(name=NAME_TWO), WebElement)
        self.assertRaises(NoSuchElementException, wrapper.get_element_by_name, '')

        wrapper.close_session()

    def test_url(self):
        wrapper = Communicator(INDEX)

        wrapper.get()
        self.assertEqual(wrapper.url, INDEX)

        wrapper.get(SET_COOKIE)
        self.assertEqual(wrapper.url, SET_COOKIE)

        wrapper.get(GET_COOKIE)
        self.assertEqual(wrapper.url, GET_COOKIE)

        wrapper.get(GOOD_COOKIE)
        self.assertEqual(wrapper.url, GOOD_COOKIE)

        wrapper.get(SET_INVALID_COOKIE)
        self.assertEqual(wrapper.url, SET_INVALID_COOKIE)

        wrapper.close_session()

    def test_cookies(self):
        wrapper = Communicator(SET_DEFAULT_COOKIE)

        wrapper.get(url=SET_DEFAULT_COOKIE)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), DEFAULT_COOKIE)

        wrapper.get(SET_INVALID_COOKIE)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), INVALID_COOKIE)

        sleep(WAIT_FOR)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), SESSION_TIMEOUT_COOKIE)

        wrapper.close_session()


if __name__ == '__main__':
    unittest.main()
