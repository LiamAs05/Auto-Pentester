import unittest
from requests.structures import CaseInsensitiveDict
from requests import Response
from src.communicator.requests_wrapper import RequestsWrapper


class HeadersTestCase(unittest.TestCase):
    def test_add_header(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_headers = wrapper.session.headers.copy()

        wrapper.add_header("Hello", "World")
        self.assertNotEqual(curr_headers, wrapper.session.headers)

    def test_remove_header(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_headers = wrapper.session.headers.copy()

        wrapper.add_header("Hello", "World")
        self.assertNotEqual(curr_headers, wrapper.session.headers)
        wrapper.remove_header("Hello")
        self.assertEqual(curr_headers, wrapper.session.headers)

    def test_empty_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_headers = wrapper.session.headers.copy()
        try:
            wrapper.add_header("", "This should not work")
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_headers = wrapper.session.headers.copy()

        try:
            wrapper.add_header(None, "This should not work either")
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_headers = wrapper.session.headers.copy()

        try:
            wrapper.add_header("This should also throw", None)
            self.assertEqual(curr_headers, wrapper.session.headers)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class CookiesTestCase(unittest.TestCase):
    def test_add_cookie(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_cookies = wrapper.session.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.session.cookies)

    def test_remove_cookie(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_cookies = wrapper.session.cookies.copy()

        wrapper.add_cookie("Hello", "World")
        self.assertNotEqual(curr_cookies, wrapper.session.cookies)
        wrapper.remove_cookie("Hello")
        self.assertEqual(curr_cookies, wrapper.session.cookies)

    def test_empty_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_cookies = wrapper.session.cookies.copy()
        try:
            wrapper.add_cookie("", "This should not work")
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_key(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_cookies = wrapper.session.cookies.copy()

        try:
            wrapper.add_cookie(None, "This should not work either")
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(KeyError, type(e))

    def test_none_value(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://stackoverflow.com")
        curr_cookies = wrapper.session.cookies.copy()

        try:
            wrapper.add_cookie("This should also throw", None)
            self.assertEqual(curr_cookies, wrapper.session.cookies)
        except Exception as e:
            self.assertEqual(ValueError, type(e))


class RequestTestCase(unittest.TestCase):
    def test_init(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch")
        sec_wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch", headers={"Hello": "World"})
        self.assertNotEqual(wrapper.session.headers, sec_wrapper.session.headers)
        self.assertEqual(wrapper.session.cookies, sec_wrapper.session.cookies)
        wrapper.close_session()
        wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch", cookies={"Haha": "Inequality"})
        self.assertNotEqual(wrapper.session.headers, sec_wrapper.session.headers)

    def test_get(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch")
        res = wrapper.get(params={"v": "fHI8X4OXluQ"})
        self.assertEqual(type(res), Response)
        self.assertEqual(wrapper.url, "https://www.youtube.com/watch")
        self.assertEqual(res.url, "https://www.youtube.com/watch?v=fHI8X4OXluQ")
        self.assertIn("Blinding Lights", res.text)

    def test_post(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://httpbin.org/anything")
        res = wrapper.post(data={"Hello": "World!"})
        self.assertEqual(type(res), Response)
        self.assertEqual(res.url, "https://httpbin.org/anything")
        self.assertIn('"method": "POST",', res.text)
        self.assertIn('"Hello": "World!"', res.text)


class StrTestCase(unittest.TestCase):
    def test_str_one(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch")
        wrapper_print = wrapper.__str__()
        self.assertIn("IP:\tignore IP for now", wrapper_print)
        self.assertIn("URL:\thttps://www.youtube.com/watch", wrapper_print)
        self.assertIn("Cookies:\t{}", wrapper_print)
        self.assertIn("Headers:\t{'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', "
                      "'Accept': '*/*', 'Connection': 'keep-alive'}", wrapper_print)
        self.assertIn("Auth:\tNone", wrapper_print)

    def test_str_two(self):
        wrapper = RequestsWrapper("ignore IP for now", "https://www.youtube.com/watch")
        wrapper.add_cookie("Hello", "World")
        wrapper.add_header("Goodbye", "World")
        wrapper.change_auth("Cya", "World")
        wrapper_print = wrapper.__str__()
        self.assertIn("IP:\tignore IP for now", wrapper_print)
        self.assertIn("URL:\thttps://www.youtube.com/watch", wrapper_print)
        self.assertIn("Cookies:\t{'Hello': 'World'}", wrapper_print)
        self.assertIn("Headers:\t{'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', "
                      "'Accept': '*/*', 'Connection': 'keep-alive', 'Goodbye': 'World'}", wrapper_print)
        self.assertIn("Auth:\t('Cya', 'World')", wrapper_print)
        wrapper.change_auth("Changed", "Auth")
        self.assertIn("Auth:\t('Changed', 'Auth')", wrapper.__str__())


if __name__ == '__main__':
    unittest.main()
