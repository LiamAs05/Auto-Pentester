#! /usr/bin/python3

import unittest
from time import sleep

from src.communicator.selenium_wrapper import SeleniumWrapper
from selenium.common.exceptions import NoAlertPresentException
from selenium.common.exceptions import NoSuchElementException
from urllib3.exceptions import MaxRetryError
from selenium.webdriver.remote.webelement import WebElement

BASE_URL = 'http://127.0.0.1:5000'
INDEX = BASE_URL + '/'
SET_DEFAULT_COOKIE = BASE_URL + '/set_default_cookie'
SET_COOKIE = BASE_URL + '/set_cookie'
GET_COOKIE = BASE_URL + '/get_cookie'
GOOD_COOKIE = BASE_URL + '/good_cookie'
SET_INVALID_COOKIE = BASE_URL + '/set_invalid_cookie'
ALERT_COOKIE = BASE_URL + '/alert_cookie'
FORM_PAGE = BASE_URL + '/form_page'
MANY_ALERTS = BASE_URL + '/many_alerts'

DEFAULT_COOKIE = 'DEFAULT_COOKIE'
INVALID_COOKIE = 'INVALID_COOKIE'
SESSION_TIMEOUT_COOKIE = 'TIMEOUT_COOKIE'

WAIT_FOR = 5.1
COOKIE_NAME = 'Name'

ID_ONE = 'id_one'
ID_TWO = 'id_two'

NAME_ONE = 'inputOne'
NAME_TWO = 'inputTwo'

CONSTANT_PAYLOAD = 'A99B'


class TestSeleniumWrapper(unittest.TestCase):
    def test_get(self):
        wrapper = SeleniumWrapper()

        wrapper.get(INDEX)
        self.assertEqual(wrapper.url, INDEX)

        wrapper.get(GOOD_COOKIE)
        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.simple_get(ALERT_COOKIE, cookies={'name': COOKIE_NAME, 'value': 'COOKIE'})
        self.assertEqual(wrapper.get_alert_text(), 'COOKIE')

        wrapper.simple_get(MANY_ALERTS)
        self.assertEqual(wrapper.get_alert_text(), '1')

        wrapper.remove_alerts()

        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.close_session()

    def test_post(self):
        wrapper = SeleniumWrapper()

        wrapper.get(FORM_PAGE)
        data = dict()
        data[wrapper.get_element_by_id(ID_ONE)] = CONSTANT_PAYLOAD
        data[wrapper.get_element_by_id(ID_TWO)] = CONSTANT_PAYLOAD

        wrapper.post(data=data)
        self.assertEqual(wrapper.get_alert_text(), CONSTANT_PAYLOAD)

        wrapper.get(FORM_PAGE)

        data = dict()
        self.assertRaises(ValueError, wrapper.post, data)

        wrapper.close_session()

    def test_get_alert_text(self):
        wrapper = SeleniumWrapper()

        wrapper.simple_get(MANY_ALERTS)

        for i in range(1, 5):
            self.assertEqual(wrapper.get_alert_text(), str(i))

        self.assertRaises(NoAlertPresentException, wrapper.get_alert_text)

        wrapper.close_session()

    def test_new_session(self):
        wrapper = SeleniumWrapper()

        wrapper.get(GET_COOKIE)
        self.assertEqual(wrapper.url, GET_COOKIE)
        cookies = wrapper.cookies
        wrapper.create_new_session()

        self.assertNotEqual(cookies, wrapper.cookies)

        wrapper.create_new_session(INDEX, cookies=cookies)

        self.assertEqual(wrapper.cookies, cookies)

        wrapper.close_session()

    def test_close_session(self):
        wrapper = SeleniumWrapper()
        wrapper.close_session()
        self.assertRaises(MaxRetryError, wrapper.get, INDEX)

    def test_is_session_active(self):
        wrapper = SeleniumWrapper()
        wrapper.get(SET_COOKIE)
        wrapper.get(INDEX)

        self.assertTrue(wrapper.is_session_active())

        sleep(WAIT_FOR)

        self.assertFalse(wrapper.is_session_active())

        wrapper.close_session()

    def test_refresh(self):
        wrapper = SeleniumWrapper()

        wrapper.get(SET_DEFAULT_COOKIE)
        self.assertTrue(wrapper.is_session_active())

        wrapper.get(INDEX)

        sleep(WAIT_FOR)

        self.assertFalse(wrapper.is_session_active())
        wrapper.close_session()

    def test_get_element_by_id(self):
        wrapper = SeleniumWrapper()

        wrapper.get(FORM_PAGE)

        self.assertIsInstance(wrapper.get_element_by_id(ID_ONE), WebElement)
        self.assertIsInstance(wrapper.get_element_by_id(ID_TWO), WebElement)
        self.assertRaises(NoSuchElementException, wrapper.get_element_by_id, '')

        wrapper.close_session()

    def test_get_element_by_name(self):
        wrapper = SeleniumWrapper()

        wrapper.get(FORM_PAGE)

        self.assertIsInstance(wrapper.get_element_by_name(NAME_ONE), WebElement)
        self.assertIsInstance(wrapper.get_element_by_name(NAME_TWO), WebElement)
        self.assertRaises(NoSuchElementException, wrapper.get_element_by_name, '')

        wrapper.close_session()

    def test_url(self):
        wrapper = SeleniumWrapper()

        wrapper.get(INDEX)
        self.assertEqual(wrapper.url, INDEX)

        wrapper.get(SET_COOKIE)
        self.assertEqual(wrapper.url, SET_COOKIE)

        wrapper.get(GET_COOKIE)
        self.assertEqual(wrapper.url, GET_COOKIE)

        wrapper.get(GOOD_COOKIE)
        self.assertEqual(wrapper.url, GOOD_COOKIE)

        wrapper.get(SET_INVALID_COOKIE)
        self.assertEqual(wrapper.url, SET_INVALID_COOKIE)

        wrapper.close_session()

    def test_cookies(self):
        wrapper = SeleniumWrapper()

        wrapper.get(SET_DEFAULT_COOKIE)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), DEFAULT_COOKIE)

        wrapper.get(SET_INVALID_COOKIE)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), INVALID_COOKIE)

        sleep(WAIT_FOR)
        wrapper.simple_get(ALERT_COOKIE)
        self.assertEqual(wrapper.get_alert_text(), SESSION_TIMEOUT_COOKIE)

        wrapper.close_session()


if __name__ == '__main__':
    unittest.main()
